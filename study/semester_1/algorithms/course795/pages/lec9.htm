<!DOCTYPE html>
<html lang="en">

<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="do.sibsutis.ru">

    <title>Лекция 9. Конспект лекций</title>
	
	<link rel="icon" type="image/png" href="../lib/css/favicon.png">
    <!-- Bootstrap Core CSS -->
    <link href="../lib/css/bootstrap.css" rel="stylesheet">
	
    <!-- Custom CSS -->
    <link href="../lib/css/scrolling-nav.css" rel="stylesheet">

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
        <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
</head>

<!-- The #page-top ID is part of the scrolling feature - the data-spy and data-target are part of the built-in Bootstrap scrollspy function -->

<body id="page-top" data-spy="scroll" data-target=".navbar-fixed-top" >
    <!-- Navigation -->
<nav class="navbar navbar-default navbar-fixed-top">
  <div class="container">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <li class="hidden"> <a class="page-scroll" href="#page-top"></a> </li>
	  
	  <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
	  
      <a class="navbar-brand " href="../index.htm"> 
						<text class = "hidden-xs">Структуры и алгоритмы обработки данных</text> 
						<text class = "visible-xs">САОД</text>
	  </a>
    </div>

    <!-- Collect the nav links, forms, and glyphicon glyphicon-list-alt content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      
	  <!-- <ul class="nav navbar-nav">
		<li><a href="#"></a></li> 
      </ul> -->
	
      <ul class="nav navbar-nav navbar-right">
        <li class="dropdown">
		<button type="button" class="navbar-toggle dropdown-toggle hidden-xs" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false" >
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
		</button>	      
		<a class = "dropdown-toggle visible-xs" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Материалы</a>
          <ul class="dropdown-menu">
            <li><a href="../index.htm">Аннотация курса</a></li>
            <li role="separator" class="divider"></li>
            <li><a href="lec_index.htm">Теория</a></li>
            <li><a href="course_work.htm">Контрольная работа</a></li>
            <li><a href="labs.htm">Лабораторные работы</a></li>
            <li role="separator" class="divider"></li>
            <li><a href="lit.htm">Литература</a></li>
          </ul>
 </li>
  </ul>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>


    <!-- Intro Section -->
	<!-- Секция с информацией "Уважаемый слушатель"	 -->
    <div id="intro" class="section content-section ">
        <div class="container">
             <div class="row">
                <div class="col-lg-12">	


<!-- содержание -->	
<div class="page-header">
<h3>9 Хэширование и поиск </h3>
<p><a href="lec9.htm#1" class=punkt>1. Понятие хэш-функции.</a>
<p><a href="lec9.htm#2" class=punkt>2. Метод прямого связывания.</a>
<p><a href="lec9.htm#3" class=punkt>3. Метод открытой адресации.</a>
</div>

<h3><a name=1></a>1 Понятие хэш-функции</h3><br>

<P ALIGN="JUSTIFY">Все рассмотренные ранее алгоритмы были связаны с задачей поиска, которую можно сформулировать следующим образом: задано множество ключей, необходимо так организовать это множество ключей, чтобы поиск элемента с заданным ключом потребовал как можно меньше затрат времени. Поскольку доступ к элементу осуществляется через его адрес в памяти, то задача сводится к определению подходящего отображения <I>H</I> множества ключей <I>K</I> во множество адресов элементов <I>A</I>.</P>
<br><div align="center"><img src="img_lec/Image48.gif" width="365" height="105"> </div>
<center>Рисунок 27 - Отображение </font><img src="img_lec/Image50.gif" width="77" height="22" align="absmiddle"></center>
<br><P ALIGN="JUSTIFY">В предыдущих главах такое отображение получалось путем различного размещения ключей (в отсортированном порядке, в виде деревьев поиска), т.е. каждому ключу соответствовал свой адрес в памяти. Теперь рассмотрим задачу построения отображения <I>H: K&#8594;A</I> при условии, что количество всевозможных ключей существенно больше количества адресов. Будем обозначать это так: <I>|K| &gt;&gt; |A|. </I>Например, в качестве множества ключей можно взять всевозможные фамилии студентов до 15 букв (<I>|K|</I>= 32<SUP>15</SUP>), а в качестве множества адресов –  100 мест в аудитории (<I>|A|=</I>100). Функция <I>H: K&#8594;A</I>, определенная на конечном множестве <I>K</I>, называется <I>хеш-функцией</I>, если <I>|K| &gt;&gt; |A</I>|. Таким образом, хеш-функция допускает, что нескольким ключам может соответствовать один адрес. <I>Хеширование</I> – один из способов поиска элементов по ключу, при этом над ключом <I>k</I> производят некоторые арифметические действия и получают значение функции <I>h=H(k)</I>, которое указывает адрес, где хранится ключ <I>k</I> и связанная с ним информация. Если найдутся ключи <I>k<SUB>i</SUB> &#8800; k<SUB>j</SUB></I>, для которых <I>H(k<SUB>i</SUB>)=H(k<SUB>j</SUB>)</I>, т.е. несколько ключей отображаются в один адрес, то такая ситуация называется <I>коллизией (конфликтом).</I></P>
<P ALIGN="JUSTIFY">Если данные организованы как обычный массив, то <I>H – </I>отображение ключей в индексы массива. Процесс поиска происходит следующим образом:</P>
<OL>

<OL>

<P ALIGN="JUSTIFY"><LI>для ключа <I>k </I> вычисляем индекс <I>h=H(k)</I></LI></P>
<P ALIGN="JUSTIFY"><LI>проверяем, действительно ли <I>h</I> определяет в массиве T элемент с ключом <I>k</I>, т. е. верно ли соотношение T[<I>H(k)</I>].data = <I>k. </I>Если равенство верно, то элемент найден. Если неверно, то возникла коллизия.</LI></P></OL>
</OL>

<P ALIGN="JUSTIFY">Для эффективной реализации поиска с помощью хеш-функций необходимо определить какого вида функцию <I>H</I> нужно использовать и что делать в случае коллизии (конфликта). Хорошая хеш-функция должна удовлетворять двум условиям:</P>

<OL>
<OL>
<P ALIGN="JUSTIFY"><LI>её вычисление должно быть очень быстрым</LI></P>
<P ALIGN="JUSTIFY"><LI>она должна минимизировать число коллизий, т.е. как можно равномернее распределять ключи по всему диапазону индекса.</LI></P>
</OL>
</OL>

<P ALIGN="JUSTIFY">Для разрешения коллизий нужно использовать какой-нибудь способ, указывающий альтернативное местоположение искомого элемента. Выбор хеш-функции и выбор метода разрешения коллизий – два независимых решения.</P>
<P ALIGN="JUSTIFY">Функции, дающие неповторяющиеся значения<I>,</I> достаточно редки даже в случае довольно большой таблицы. Например, знаменитый парадокс дней рождений утверждает<I>,</I> что если в комнате присутствует не менее 23 человек, имеется хороший шанс, что у двух из них совпадет день рождения. Т.е., если мы выбираем функцию, отображающую 23 ключа в таблицу из 365 элементов, то с вероятностью 0,4927 все ключи попадут в разные места.</P>
<P ALIGN="JUSTIFY">Теоретически невозможно так определить хеш-функцию, чтобы она создавала случайные данные из неслучайных реальных ключей. Но на практике нетрудно сделать достаточно хорошую имитацию случайности, используя простые арифметические действия.</P>
<P ALIGN="JUSTIFY">Будем предполагать, что хеш-функция имеет не более <I>m</I> различных значений<I>: 0&#8804;H(k)&lt;m </I>для любого значения ключа<I>.</I> Например, если ключи десятичные, то возможен следующий способ. Пусть <I>m</I>=1000, в качестве <I>H(k</I>) можно взять три цифры из середины двадцатизначного произведения <I>k•k</I>. Этот метод “середины квадрата”, казалось бы, должен давать довольно равномерное распределение между 000 и 999. но на практике такой метод не плох, если ключи не содержат много левых или правых нулей подряд.</P>
<P ALIGN="JUSTIFY">Исследования выявили хорошую работу двух типов хеш-функций: один основан на умножении, другой на делении.</P>

<OL>
<OL>
<P ALIGN="JUSTIFY"><LI><I>метод деления</I> особенно прост: используется остаток от деления на <I>m H(K)=K </I>mod<I> m. </I>При этом желательно <I>m</I> брать простым числом. </LI></P>
<P ALIGN="JUSTIFY"><LI><I>метод умножения H(K)=</I>2<SUP>m</SUP>(<I>A&#8729;K </I>mod <I>w</I>), где <I>A</I> и <I>w</I> взаимно простые числа.</LI></P>
</OL>
</OL>

<P ALIGN="JUSTIFY">Далее будем использовать функцию <I>H(k)=ORD(k) </I>mod<I> m</I>, где ORD(<I>k</I>) – порядковый номер ключа, <I>m</I> – размер массива (таблицы), причем <I>m </I>рекомендуется брать простым числом.</P>
<P ALIGN="JUSTIFY">Если ключ поиска является строкой, то для вычисления ее хеш-номера будем рассматривать её как большое целое число, записанное в 256-ичной системе счисления (каждый символ строки является цифрой), т.е. </P>
<P ALIGN="CENTER"><I>H(S<SUB>1</SUB>S<SUB>2</SUB>S<SUB>3</SUB>…S<SUB>t</SUB>)</I>=(<I>S<SUB>1</SUB></I>&#8729;256<I><SUP>t-1</SUP></I>+<I>S<SUB>2</SUB></I>&#8729;256<SUP><I>t</I>-2</SUP>+…+<I>S</i><SUB><i>t</I>-1</SUB> 256+<I>S</i><SUB><i>t</I></SUB>) mod <I>m</I> .</P>
<P ALIGN="JUSTIFY">Используя свойства остатка от деления можно легко вычислить подобные выражения: <I>(a+b)&#8729;</I>mod <I>m</I>=(<I>a</I> mod <I>m</I> + <I>b</I> mod <I>m</I>) mod <I>m. </I>Например, (47+56) mod 10 = (7+6) mod 10 = 3</P>
<P ALIGN="JUSTIFY"></P>
<br><I><P ALIGN="CENTER"><B>Алгоритм на псевдокоде</B></P>
<P ALIGN="CENTER">Вычисление хеш-функции для строки S</P></I><br>
<P ALIGN="JUSTIFY">Обозначим t – длина строки S</P>
<P ALIGN="JUSTIFY">h:=0</P>
<P ALIGN="JUSTIFY">DO (i=1,2,…,t)</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;h:=(h&#8729;256+S<SUB>i</SUB>) mod m</P>
<P ALIGN="JUSTIFY">OD</P>
<br><h3><a name=2></a>2 Метод прямого связывания</h3><br>
<P ALIGN="JUSTIFY">Рассмотрим метод устранения коллизий путем связывания в список всех элементов с одинаковыми значениями хеш-функции, при этом необходимо <I>m</I> списков. Включение элемента в хэш-таблицу осуществляется в два действия<I>:</I> </P>
<P ALIGN="JUSTIFY">1) вычисление <I>i=H(k)</I></P>
<P ALIGN="JUSTIFY">2) добавление элемента <I>k</I> в конец <I>i</I>-того списка</P>
<P ALIGN="JUSTIFY">Поиск элемента также требует два действия:</P>
<P ALIGN="JUSTIFY">1) вычисление <I>i=H(k)</I></P>
<P ALIGN="JUSTIFY">2) последовательный просмотр <I>i-</I>того списка.</P>
<P ALIGN="JUSTIFY"><B>Пример</B>. Составить хеш-таблицу для строки КУРАПОВА ЕЛЕНА. Будем использовать номера символов в алфавитном порядке. Пусть <I>m</I>=5, </P>
<P ALIGN="JUSTIFY"><I>H(k)=ORD </I>(<I>k </I>mod 5) </P>
<P ALIGN="JUSTIFY">Вычислим значения хэш-функции для символов строки</P>
<P><I>H</I>(К)=11 mod 5=1</P>
<P><I>H</I>(У)=20 mod 5=0</P>
<P><I>H</I>(Р)=17 mod 5=2</P>
<P><I>H</I>(А)=1 mod 5=1</P>
<P><I>H</I>(П)=16 mod 5=1</P>
<P><I>H</I>(О)=15 mod 5=0</P>
<P><I>H</I>(В)=3 mod 5=3</P>
<P><I>H</I>(Е)=6 mod 5=1</P>
<P><I>H</I>(Л)=12 mod 5=2</P>
<P ALIGN="JUSTIFY"><I>H</I>(Н)=14 mod 5=4</P>
<P ALIGN="JUSTIFY">Объединим символы с одинаковыми хеш-номерами в один список</P>
<br><div align="center"><img src="img_lec/Image51.gif" width="419" height="146"> </div>
<br><center>Рисунок 28 - Хеш-таблица, построенная методом прямого связывания</center><br>
<P ALIGN="JUSTIFY">Оценим трудоемкость поиска в хеш-таблице, построенной методом прямого связывания. Пусть <I>n</I> – количество элементов данных, <I>m</I> – размер хеш-таблицы. Если все ключи равновероятны и равномерно распределены по хеш-таблице, то средняя длина списка будет <IMG SRC="img_lec/Image52.gif" WIDTH="21" HEIGHT="48" align="absmiddle">. При поиске в среднем нужно просмотреть половину списка. Поэтому C<SUB>ср</SUB>=<IMG SRC="img_lec/Image53.gif" WIDTH="30" HEIGHT="48" align="absmiddle">. Если <I>n&lt;m</I>, то С<SUB>ср</SUB>&lt;2, т. е. в большинстве случаев достаточно одного сравнения. Объем дополнительной памяти  определяется объемом памяти, необходимой для хранения (<I>m+n</I>) указателей. Известно, что трудоемкость поиска с помощью двоичного дерева<I>: </I>С<SUB>ср</SUB>=log <I>n</I>, объем дополнительной памяти – 2<I>n</I> указателей. Метод прямого связывания становится более эффективным, чем дерево поиска, когда</P>
<P ALIGN="CENTER"><IMG SRC="img_lec/Image54.gif" WIDTH="84" HEIGHT="48" align="absmiddle">, <IMG SRC="img_lec/Image55.gif" WIDTH="85" HEIGHT="50" align="absmiddle"></P>
<P ALIGN="JUSTIFY">Если <I>n</I>=1000, то при <I>m</I>&gt;50 (<I>m</I>=53) метод прямого связывания более эффективен, чем дерево поиска, причем экономия памяти составит около 4 Кбайт. Можно сэкономить еще больше памяти, если отказаться от списков и размещать данные в самой хеш-таблице.</P>
<br><h3><a name=3></a>3 Метод открытой адресации</h3><br>
<P ALIGN="JUSTIFY">Рассмотрим метод открытой адресации, который применяется для разрешения коллизий при поиске с использованием хеш-функций. Суть метода заключается в последовательном просмотре различных элементов таблицы, пока не будет найден искомый ключ <I>k</I> или свободная позиция. Очевидно, необходимо иметь правило, по которому каждый ключ <I>k</I> определяет последовательность проб, т.е. последовательность позиций в таблице, которые нужно просматривать при вставке или поиске ключа <I>k</I>. Если мы произвели пробы и обнаружили свободную позицию, то ключа <I>k</I> нет в таблице. Таким образом, коллизия устраняется путем вычисления последовательности <I>вторичных хеш-функций:</i></P>
<P ALIGN="JUSTIFY"><i>h<SUB>0</SUB>=h(x)</i></P>
<P ALIGN="JUSTIFY"><i>h<SUB>1</SUB>=h(x)+g(1) (</I>mod<I> m)</i></P>
<P ALIGN="JUSTIFY"><i>h<SUB>2</SUB>=h(x)+g(2) (</I>mod <I>m)</i></P>
<P ALIGN="JUSTIFY"><i>h<SUB>i</SUB>=h(x)+g(i) (</I>mod <I>m)</i></P>
</I><P ALIGN="JUSTIFY">Самое простое правило для просмотра – просматривать подряд все следующие элементы таблицы. Этот прием называется <I>методом линейных проб</I>, при этом g(<I>i)=i, i</I>=1,2,…,<I>m</I>-1. Недостаток данного метода – плохое рассеивание ключей (ключи группируются вокруг первичных ключей, которые были вычислены без конфликта), хотя и используется вся хеш-таблица.</P>
<P ALIGN="JUSTIFY">Если в качестве вспомогательных функций использовать квадратичные, т.е. <I>g(i)=i<SUP>2</SUP>, i</I>=1,2,…,<I>m</I>-1, то такой способ просмотра элементов называется <I>методом квадратичных проб</I>. Достоинство этого метода – хорошее рассеивание ключей, хотя хеш-таблица используется не полностью.</P>
<P ALIGN="JUSTIFY"><U>Утверждение.</U> <I>Если m – простое число, то при квадратичных пробах просматривается по крайней мере половина хеш-таблицы.</I></P>
<P ALIGN="JUSTIFY"><U>Доказательство</U>. Пусть <I>i</I>-ая и <I>j</I>-ая пробы, <I>i&lt;j</I>, приводят к одному значению <I>h, </I>т.е.<I> h<SUB>i</SUB>=h<SUB>j</SUB></I>. Тогда <I>i</I><SUP>2 </SUP>mod <I>m</I>=<I>j</I><SUP>2</SUP> mod <I>m</i></P>
<P ALIGN="JUSTIFY">(j<SUP>2 </SUP>– i<SUP>2</SUP>)</I> mod <I>m</I>=0</P>
<P ALIGN="JUSTIFY"><I>(j+i)(j-i)</I> mod <I>m</I>=0</P>
<P ALIGN="JUSTIFY"><I>(j+i)(j-i)</I>=<I>km</i></P>
<P ALIGN="JUSTIFY"><i>i+j</I>=<I>km/(j-i)</i></P>
<P ALIGN="JUSTIFY">Если <I>m</I> – простое число, то <I>k/(j-i) </I>– целое число больше нуля. В худшем случае <I>k/(j-i)</I>=1, тогда <I>i+j=m</I> и <I>j&gt;m/</I>2. (Если <I>m</I> – не простое число, то <I>k/(j-i)</I> не обязательно должно быть целым).</P>
<P ALIGN="JUSTIFY">На практике этот недостаток не столь существенен, т.к. <I>m/2</I> вторичных попыток при разрешении конфликтов встречаются очень редко, главным образом в тех случаях, когда таблица почти заполнена.</P>
<P ALIGN="JUSTIFY">Итак, нам нужно вычислять </P>
<P><I>h<SUB>0</SUB>=h(x)</i></P>
<P><i>h<SUB>i</SUB>=(h<SUB>0</SUB>+i<SUP>2</SUP>) </I>mod<I> m, i&gt;0</i></P>
<P ALIGN="JUSTIFY">Вычисление <I>h<SUB>i</SUB></I> требует одного умножения и деления. Покажем, как можно избавиться от этих операций. Произведем несколько первых шагов при вычислении <I>h<SUB>i</SUB>.</i></P>
<P ALIGN="JUSTIFY"><i>h<SUB>1</SUB>=h<SUB>0</SUB>+</I>1</P>
<P ALIGN="JUSTIFY"><I>h<SUB>2</SUB>=h<SUB>0</SUB></I>+4=<I>h<SUB>0</SUB>+</I>1+3=<I>h<SUB>1</SUB></I>+3  (mod <I>m</I>)</P>
<P ALIGN="JUSTIFY"><I>h<SUB>3</SUB>=h<SUB>0</SUB></I>+9=<I>h<SUB>0</SUB></I>+4+5=<I>h<SUB>2</SUB></I>+5 (mod <I>m</I>)</P>
<P ALIGN="JUSTIFY">…</P>
<P ALIGN="JUSTIFY">Нетрудно видеть, что возникает рекуррентное соотношение:</P>
<P ALIGN="JUSTIFY"><I>d<SUB>0<</SUB></I>=1, <I>h<SUB>0</SUB>=h(x)</i></P>
<P ALIGN="JUSTIFY"><i>h<SUB>i+1</SUB></I>=<I>h<SUB>i</SUB>+d<SUB>i</SUB></I> (mod <I>m</I>)</P>
<P ALIGN="JUSTIFY"><I>d<SUB>i+1</SUB>=d<SUB>i</SUB></I>+2</P>
<P ALIGN="JUSTIFY">Поскольку <I>h<SUB>i</SUB>&lt;m, d<SUB>i</SUB>&lt;m</I>, то можно избавиться от деления, заменив его вычитанием <I>h=h-m</I> (см. алгоритм).</P>
<P ALIGN="JUSTIFY"></P>
<br><I><P ALIGN="CENTER"><B>Алгоритм на псевдокоде</B></P>
<P ALIGN="CENTER">Поиск и вставка элемента с ключом x</P></I><br>
<P ALIGN="JUSTIFY">Пусть хеш-таблица является массивом A=(a<SUB>0</SUB>, a<SUB>1</SUB>, … , a<SUB>m-1</SUB>), сначала заполненный нулями. Пусть <I>x</I>&#8800;0.</P>
<P ALIGN="JUSTIFY">h:=x mod m</P>
<P ALIGN="JUSTIFY">d:=1</P>
<P ALIGN="JUSTIFY">DO </P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;IF (a<SUB>h</SUB>=x) элемент найден OD</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;IF (a<SUB>h</SUB>=0) ячейка пуста, a<SUB>h</SUB>:=x OD</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;IF (d&#8805;m) переполнение таблицы OD</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;h:=h+d</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;IF (h&#8805;m) h:=h-m FI</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;d:=d+2</P>
<P ALIGN="JUSTIFY">OD</P>
<br><P ALIGN="JUSTIFY">Заметим, что если нужен только поиск, то необходимо исключить операцию a<SUB>h</SUB>:=x.</P>
<P ALIGN="JUSTIFY"><B>Пример</B> построения хеш-таблицы методом квадратичных проб (<I>m</I>=11) для строки ВЛАДИМИР ПУТИН. Номера символов данной строки приведены в таблице.</P>
<br><P>Таблица 3 - Номера символов строки</P><br>
<p><img src="img_lec/Image56.gif" width="523" height="50"> <br>

<P ALIGN="JUSTIFY">Для каждого символа вычисляем его хеш-номер (или последовательность хеш-номеров, если потребуется) и в соответствии с вычисленным номером заносим символ в хеш-таблицу.</P>
<P ALIGN="JUSTIFY">В: <I>h<SUB>0</SUB></I>=3 mod 11=3</P>
<P ALIGN="JUSTIFY">Л: <I>h<SUB>0</SUB></I>=12 mod 11=1</P>
<P ALIGN="JUSTIFY">А: <I>h<SUB>0</SUB></I>=1 mod 11=1</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>h<SUB>1</SUB></I>=1+1=2</P>
<P ALIGN="JUSTIFY">Д: <I>h<SUB>0</SUB></I>=5</P>
<P ALIGN="JUSTIFY">И: <I>h<SUB>0</SUB></I>=9</P>
<P ALIGN="JUSTIFY">М: <I>h<SUB>0</SUB></I>=13 mod 11=2</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>h<SUB>1</SUB></I>=2+1=3</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>h<SUB>2</SUB></I>=3+3=6</P>
<P ALIGN="JUSTIFY">Р: <I>h<SUB>0</SUB></I>=17 mod 11=6  </P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>h<SUB>1</SUB></I>=6+1=7</P>
<P ALIGN="JUSTIFY">П: <I>h<SUB>0</SUB></I>=16 mod 11=5</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>h<SUB>1</SUB></I>=5+1=6</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>h<SUB>2</SUB></I>=6+3=9</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>h<SUB>3</SUB></I>=9+5=3 </P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>h<SUB>4</SUB></I>=3+7=10 </P>
<P ALIGN="JUSTIFY">У: <I>h<SUB>0</SUB></I>=20 mod 11=9 </P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>h<SUB>1</SUB></I>=9+1=10</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>h<SUB>2</SUB></i>=10+3=13 mod 11=2</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>h<SUB>3</SUB></i>=2+5=7</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>h<SUB>4</SUB></i>=7+7=14 mod 11=3</P>
<P ALIGN="JUSTIFY">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>h<SUB>5</SUB></i>=3+9=12 mod 11=1</P>
<P ALIGN="JUSTIFY">Просмотр элементов хеш-таблицы на этом заканчивается несмотря на то, что в таблице еще имеются незаполненные ячейки, поскольку следующее значение <I>d</I> уже не будет строго меньше <I>m</I>=11. Таким образом, для данной строки не удается построить хеш-таблицу с <I>m</I>=11. Заполненная часть хеш-таблицы выглядит следующим образом</P>
<br><div align="center"><img src="img_lec/Image57.gif" width="332" height="50"></div><br>
<center>Рисунок 29 - Использование квадратичных проб</center><br>

<h3>Контрольные вопросы</h3></b>
<OL>
<P ALIGN="JUSTIFY"><LI>Что такое хэш-функция?</LI></P>
<P ALIGN="JUSTIFY"><LI>Что такое коллизия?</LI></P>
<P ALIGN="JUSTIFY"><LI>Как осуществляется поиск с помощью хэш-таблицы?</LI></P>
<P ALIGN="JUSTIFY"><LI>Какие способы построения хэш-таблиц Вы знаете?</LI></P></OL>
</OL>

<!-- конец содержания-->	
				
				</div>
			</div>
			
            </div>
        </div>
    </div>
	
	<!--Меню навигации по лекциям -->	
	<div aria-label="..." class = "nav-menu">
	  <ul class="pager  background-transition-slow" >
		 <li title="Наверх" style = "margin-right:15px;	"><a class = "glyphicon glyphicon-menu-up page-scroll" href="#page-top" ></a></li>
		 <li title="К предыдущей лекции"><a class = "glyphicon glyphicon-menu-left page-scroll" href="lec8.htm" ></a></li>
		 <li title="В содержание"><a class = "glyphicon glyphicon-list-alt" href="lec_index.htm" ></a></li>
		 <li title="К следующей лекции"><a class = "glyphicon glyphicon-menu-right page-scroll" href="prilA.htm" ></a></li>
	  </ul>
	</div>
	<!---->
	
	</div>
    <!-- jQuery -->
    <script src="../lib/js/jquery.js"></script>

    <!-- Bootstrap Core JavaScript -->
    <script src="../lib/js/bootstrap.min.js"></script>

    <!-- Scrolling Nav JavaScript -->
    <script src="../lib/js/jquery.easing.min.js"></script>
    <script src="../lib/js/scrolling-nav.js"></script>

</body>

</html>
