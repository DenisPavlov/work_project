<HTML>
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<style>
P {text-align=justify;
		text-indent= 19px;
		}</style>
<TITLE>Математическая логика и теория алгоритмов</TITLE>
</HEAD>
<BODY >
<BASEFONT face=arial> 
<table border= 0  cellpadding= 0  cellspacing= 0  width= 100%
  height= 31 >
    <tr>
        <td width= 100%  bgcolor=#000000>
         <div align= right><font color= #FFFFFF  size= 3  face= Arial><b>Математическая логика и теория алгоритмов</b></font>
         </div>
        </td>
    </tr>
</table>

<table border= 0  cellpadding= 0  cellspacing= 0  height= 35 >
    <tr>
        <td width=400  bgcolor=gray><p align= right><font   color= #FFFFFF size=3  face= Arial><strong> 
		<B>2.8 Классы сложности P и NP</B> </strong></font></p>
        </td>

          <td width= 300  bgcolor= #EEE0BF >
		  
 <p align= center > <a href= 2_7.htm> <font color= #0000FF  size= 2  face= Arial>назад</font></a> <font
              color= #0000FF  size= 2  face= Arial> | </font> <a href= main.htm><font color= #0000FF  size= 2 
          face= Arial>оглавление</font></a> <font color= #0000FF  size= 2  face= Arial> 
        | </font> <a href= 2_9.htm> <font color= #0000FF  size= 2  face= Arial>вперёд</font> 
        </a> <font color= #0000FF  size= 2  face= Arial> </font></p>
        </td>	     

 
    </tr>
</table>
<P>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspНижние оценки временной сложности алгоритма позволяют судить о том, насколько эффективен алгоритм. Однако получение прямых нижних оценок удается только в очень редких случаях. Кроме того, функции емкостной и временной сложности определяются для конкретных алгоритмических систем. Будем считать, что алгоритмы реализуемы на <a href="2_2.htm#OMT">машине Тьюринга</a> и сложность алгоритмов определяется в рамках алгоритмической системы Тьюринга.
<P>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspАлгоритм, обе функции сложности которого полиномиальные, называется <i>полиномиальным алгоритмом</i>. Такой алгоритм считается хорошим, быстрым, эффективно реализуемым. Примеры полиномиальных алгоритмов – сортировка массива чисел, алгоритм Евклида, поиск эйлерова цикла в графе, поиск остовного дерева минимального веса, умножение матриц, быстрое умножение чисел и т.д.
<P>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspАлгоритм, у которого хотя бы одна из двух функций сложности экспоненциальная называется <i>экспоненциальным алгоритмом</i>. Такой алгоритм может считаться неэффективным. Например, задача построения всех подмножеств данного множества имеет экспоненциальную сложность.
<P>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspТеория сложности алгоритмов определяет классы алгоритмов по сложности. Обозначим  P – класс, содержащий все полиномиальные алгоритмы; E  – класс, содержащий все экспоненциальные алгоритмы. Нетрудно видеть, что <img src=img/2_8.gif align="absmiddle">.
<P>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspЗадача, решаемая полиномиальным алгоритмом, называется <i>легкоразрешимой</i> задачей. Задача, которую нельзя решить полиномиальным алгоритмом называется <i>трудноразрешимой</i>. В число трудных задач входят <a href="2_4.htm#anrz">алгоритмически неразрешимые задачи</a>. Неразрешимость есть крайний случай экспоненциальности.
<P>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspПолиномиальные алгоритмы обладают свойством замкнутости, т.е. можно комбинировать различные полиномиальные алгоритмы, используя один в качестве «подпрограммы» другого и при этом  результирующий алгоритм будет иметь полиномиальную сложность. Аналогичное замечание можно сделать и  относительно экспоненциальных алгоритмов.
<P>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspПомимо полиномиальных и экспоненциальных алгоритмов существуют алгоритмы, не попадающие ни в один их этих классов. Для этого введем понятие <i>недетерминированного алгоритма</i>. Все алгоритмы, рассматриваемые до сих пор, были детерминированными, т.е. результат текущего шага алгоритма однозначно определяет действия следующего шага. в недетерминированном алгоритме результат текущего шага алгоритма  допускает более одной возможности для последующих шагов. Недетерминированные алгоритмы не являются разновидностью вероятностных или случайных алгоритмов, но за один такт работы такие алгоритмы могут выполнять несколько действий одновременно.
<P>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspОсобенно хорошо применимы недетерминированные алгоритмы для задач распознавания, т.е. в качестве результата такие алгоритмы должны выдавать ответ «ДА» или «НЕТ». Недетерминированный алгоритм для задач распознавания состоит из двух стадий – стадия угадывания и стадия проверки. По заданным входным данным задачи на первой стадии происходит угадывание или генерация некоторой структуры <i>S</i>. Для решения  задачи генерируется столько копий алгоритма, сколько существует различных структур <i>S</i>. Затем в каждой копии алгоритма для структуры <i>S</i>  происходит проверка, которая выполняется обычным детерминированным алгоритмом и либо заканчивается ответом «ДА», либо ответом «НЕТ», либо продолжает работать бесконечно (два последних случая можно не различать).
<P>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspДля моделирования таких алгоритмов используют недетерминированные машины Тьюринга, в которых одна конфигурация может иметь несколько исходов (ответов). Каждый ответ обрабатывается другой машиной или машина сама выбирает наилучший ответ (здесь нужно ввести операцию выбора). Такая машина возможна, но требует экспоненциального размножения конструкции. 
<P>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspОпределим класс  <i>NP</i> как класс всех задач, которые можно решить недетерминированными алгоритмами, работающими в течение полиномиального времени. Очевидно, <img src=img/2_8_1.gif align="absmiddle">.
<P>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspЗадача называется <i>NP</i>-задача, если ее можно полиномиально преобразовать в любую данную <i>NP</i>-задачу. Если можно решить полную <i>NP</i>-задачу, то можно решить и все <i>NP</i>-задачи. Класс  <i>NP</i> охватывает многие задачи: задача о выполнимости, задача коммивояжера, решение систем уравнений с целыми переменными, составление расписаний с определенными условиями, задача о рюкзаке, оптимальный раскрой и т.д. Все они решаются на детерминированных машинах Тьюринга экспоненциально. Они трудны, но не доказано, что их нельзя упростить. Если хотя бы одну из них можно решить полиномиально, то все другие также решаются полиномиально. Общие подзадачи <i>NP</i>-задач могут быть легкоразрешимыми. 

<P>
<hr>
<div align= center >


<a href= 2_7.htm><font color= #0000FF  size= 2 face= Arial>назад</font></a>

<font color= #0000FF  size= 2 face= Arial> | </font>

<a href= main.htm><font color= #0000FF size= 2  face= Arial>оглавление</font></a>

<font color= #0000FF  size= 2  face= Arial> | </font>

<a href= 2_9.htm><font color= #0000FF  size= 2 face= Arial>назад</font></a>

<font color= #0000FF  size= 2  face= Arial> </font></div>

<br>
</body>
</html>
