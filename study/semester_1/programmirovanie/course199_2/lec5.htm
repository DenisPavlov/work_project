<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<TITLE></TITLE>
<style type="text/css">
p {
margin:0cm;
margin-bottom:.0001pt;
text-align:justify;
text-indent:35.45pt;
mso-pagination:widow-orphan;
font-size:12.0pt;
font-family:"arial";
mso-fareast-font-family:"arial";
}
.code{font-family:"Courier New";font-size:10pt}
</style>
</HEAD>
<BODY>
<basefont face=arial size=3>
<B></B>
<table border="0" cellpadding="0" cellspacing="0" width="100%"
 height="31">
<TR>
 <TD width="100%" bgcolor="#000000"><div align=right><font color="#FFFFFF" size=3 face=Arial><b>Программирование
 на языках высокого уровня. Язык программирования Паскаль&nbsp;</b></font></div></td>
</TR>
</table>
<table border="0" cellpadding="2" cellspacing="0" width="100%" height="35">
<TR>
 <TD width="486" bgcolor=gray height="26">
<P align=right>&nbsp;</p>
 </td>
 <TD width="230" bgcolor="#EEE0BF" height="26"><p align=center><font size=2 face=Arial color="#0000FF"><a href="P6.htm">
</a><a href="lec4.htm">назад</a> | <a href="index_lec.htm">оглавление</a>
| <a href="lec6.htm"> вперёд</a></font></p>
 </td>
 <TD width="43" height="26">&nbsp;</td>
</TR>
</table><br>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<TR>
 <TD><div align=center></div>
 <P><b>5. Подпрограммы (процедуры и функции)</b></P>
 <P>&nbsp;</P>
<P><I>Подпрограмма</i> – относительно самостоятельная часть
 программы, имеющая свое имя и выполняющая определенные действия.</P>
<P>Подпрограммы повышают надежность и наглядность программ,
 т.к. позволяют разрабатывать и отлаживать каждый блок программы независимо
 (например, разными людьми).</P>
<P><U>Структура подпрограммы</u> почти полностью повторяет
 структуру всей программы и состоит из следующих частей:</P>
 <UL>
 <P>
 <LI>заголовок подпрограммы</LI>
 <p></P>
 <P>
 <LI>раздел описаний</LI>
 <p></P>
 <P>
 <LI>тело подпрограммы</LI>
 <p></P>
 </UL>
<P>В Паскаль имеются два вида подпрограмм – <U>процедуры</U>
 и <U>функции</U>. Они отличаются назначеием и способом их использования.
 <I><U>Процедуры</u></I> служат для выполнения определенной последовательности
 действий, направленных на изменение программной обстановки (изменение
 значений переменных, ввод/вывод данных и т.п.). <I><U>Функции</u></I>
 для вычисления значения выражения.</P>
<P>&nbsp;</P>
<P></P>
<P><b><u><a name="5_1"></a>5.1 Процедуры</u></b></P>
<P>&nbsp;</P>
<P></P>
<P></P>
<P><b>procedure &lt;имя&gt; (список формальных параметров);</b></P>
<P><b>&lt;раздел описаний&gt;;</b></P>
<P><b>begin</b></P>
<P><b>&nbsp; &nbsp; &lt;тело процедуры&gt;;</b></P>
<P><b>end;</b></P>
<P>&nbsp;</P>
<P></P>
<P><U>Пример 1:</u> Процедура вычисления и вывода на экран
 куба числа.</P>
<P class=code>procedure cub(x: real);</P>
<P class=code>vary: real;</P>
<P class=code>begin</P>
<P class=code><b>&nbsp; </b>y:=x*x*x;</P>
<P class=code><b>&nbsp; </b>writeln(y);</P>
<P class=code>end;</P>
<P>&nbsp;</P>
<P></P>
<P>Указание имени процедуры в программе приводит к активизации
 процедуры и называется ее <I>вызовом</I>. Сразу после активизации процедуры
 начинают выполняться входящие в нее операторы. После выполнения последнего
 оператора процедуры управление передается в основную программу и далее
 выполняются операторы, следующие за вызовом процедуры. Процедура может
 вызываться в основной программе неоднократно.</P>
<P>&nbsp;</P>
<P><u>Например:</u></P>
<P><span class=code>cub(5);</span></P>
<P class=code>…</P>
<P class=code>readln(z);</P>
<P class=code>cub(z);</P>
<P class=code>&nbsp;</P>
<P></P>
<P><IMG SRC="img/Image1445.gif" WIDTH=344 HEIGHT=119></P>
<P></P>
<P>&nbsp;</P>
<P>Для обмена информацией между основной программой и процедурой
 используются параметры, которые придают процедуре универсальность.</P>
<P>&nbsp;</P>
<P></P>
<P><U>Пример 2:</u> Программа, выводящая на экран следующее:</P>
<P></P>
<P>*********</P>
<P>a=1b=1</P>
<P>*********</P>
<P>a=2b=4</P>
<P>*********</P>
<P>a=3b=9</P>
<P>*********</P>
<P>a=4b=16</P>
<P> *********</P>
<P></P>
<P class=code>vara,b: integer;</P>
<P></P>
<P class=code>procedure Stars;{без параметров}</P>
<P class=code>vari: integer;</P>
<P class=code>begin</P>
<P class=code><b>&nbsp;&nbsp;</b>for i:=1 to 9 do
 write(‘*’);</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>writeln;</P>
<P class=code>end;<br>
</P>
<P></P>
<P class=code>begin</P>
<P class=code><b>&nbsp;</b>Stars;</P>
<P class=code><b>&nbsp;</b>for a:=1 to 4 do</P>
<P class=code><b>&nbsp;</b>begin</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b><b>&nbsp;</b>b:=sqr(a);</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b><b>&nbsp;</b>writeln(‘a=’,a,’
 b=’,b);</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b><b>&nbsp;</b>Stars;
 {вызов процедуры Stars }</P>
<P></P>
<P class=code><b>&nbsp;</b>end;</P>
<P class=code>end.</P>
<P>&nbsp;</P>
<P><u>Пример 3:</u></P>
<P class=code>vara,b: integer;</P>
<P></P>
<P class=code>procedure Stroka(ch: char, n: integer);</P>
<P class=code>vari: integer;</P>
<P class=code>begin</P>
<P class=code><b>&nbsp;</b>for i:=1 to n do write(ch);</P>
<P class=code><b>&nbsp;</b>writeln;</P>
<P class=code>end;<br>
</P>
<P></P>
<P class=code>begin</P>
<P class=code><b>&nbsp;</b>Stroka(‘+’,4);</P>
<P class=code><b>&nbsp;</b>for a:=1 to 3 do</P>
<P class=code><b>&nbsp;</b>begin</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b><b>&nbsp;</b>b:=sqr(a);</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b><b>&nbsp;</b>writeln(‘a=’,a,’
 b=’,b);</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b><b>&nbsp;</b>Stroka(‘*’,8);</P>
<P class=code><b>&nbsp;</b>end;</P>
<P class=code>end.</P>
<P>&nbsp;</P>
<P></P>
<P>Разберем вызов процедуры Stroka(‘*’,8): ‘*’ и 8 – фактические
 параметры (т.е. те, которые указаны в скобках после имени процедуры при
 ее вызове), они присваиваются при вызове формальным параметрам ch и n
 (т.е. тем, которые указаны в скобках после имени процедуры при ее описании).</P>
<P><U>Замечание:</u> количество, порядок и тип параметров
 при вызове процедуры должны совпадать с количеством, порядком и типом
 параметров, заданным при описании процедуры.</P>
<P></P>
<P><u> Результат на экране:</u></P>
<P></P>
<P>++++</P>
<P>a=1b=1</P>
<P>********</P>
<P>a=2b=4</P>
<P>********</P>
<P>a=3b=9</P>
<P>********</P>
<P><br>
</P>
<P></P>
<P><b><u><a name="5_2"></a>5.2 Функции</u></b></P>
<P><U><I>Функция</i></u> отличается от процедуры тем, что
 результат работы функции возвращается в виде значения через ее имя. Вызов
 процедуры – это отдельный оператор, а вызов функции может быть использован
 в выражениях вместе с другими операторами (в правой части оператора присваивания
 или в операторе write/writeln).</P>
<P><u>Пример:</u></P>
<P>стандартные процедуры:write, writeln, read, readln,
 delay, clrscr…</P>
<P>стандартные функции: sqr, sqrt, abs, odd, exp,
 ln, sin, cos…</P>
<P></P>
<P><u>Описание функции:</u></P>
<P></P>
<P><b>function &lt;имя&gt; (список формальных параметров):
 &lt;тип&gt;;</b></P>
<P><b>&lt;раздел описаний&gt;;</b></P>
<P><b>begin</b></P>
<P><b> &nbsp;&nbsp;&lt;тело функции&gt;;</b></P>
<P><b>end;</b></P>
<P>&nbsp;</P>
<P><U>Пример 1:</u> f(x,y)=<IMG SRC="img/Image1446.gif" WIDTH=67 HEIGHT=29 align="absmiddle">;</P>
<P class=code>function f (x,y: integer): real;</P>
<P class=code>begin</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>f:=sqrt(sqr(x)+sqr(y));</P>
<P class=code>end;<br>
</P>
<P></P>
<P class=code>begin</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>……</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>z:=f(2,3);</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>writeln(‘f=’,
 f(6,8));</P>
<P class=code>end.</P>
<P></P>
<P><U>Пример 2:</u><IMG SRC="img/Image1447.gif" WIDTH=161 HEIGHT=46 align="absmiddle"></P>
<P class=code>vars:real;</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>i,n: integer;</P>
<P></P>
<P class=code>function fact(k: integer): longint;</P>
<P class=code>varf: longint;</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b><b>&nbsp;</b><b>&nbsp;</b><b>&nbsp;</b>j:
 integer;</P>
<P class=code>begin</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>f:=1;</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>for j:=1
 to k do f:=f*j;</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>fact:=f;</P>
<P class=code>end;<br>
</P>
<P></P>
<P class=code>begin</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>write(‘Введите
 n’);</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>readln(n);</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>S:=0;</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>for i:=1 to
 n do s:=(s+1)/(fact(i)+fact(i+1)+fact(i+2));</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>writeln(‘S
 = ’,s:6:4);</P>
<P class=code>end.</P>
<P></P>
<P>&nbsp;</P><P>&nbsp;</P>
<P><b><u><a name="5_3"></a>5.3 Области действия имен</u></b></P>
<OL>
<LI>Имена переменных, описанных в основной программе, называются <I>глобальными</I>
 и доступны в основной программе и во всех подпрограммах.</LI>
<LI>Имена переменных, описанных в подпрограмме, называются <I>локальными</I>
 и доступны в этой подпрограмме и во всех вложенных в нее подпрограммах
 (это же относится и к именам формальных параметров!)</LI>
<LI>Имена локальных переменных перекрывают имена глобальных, то есть если
 имена переменных в основной программе и подпрограмме совпадают, то в
 подпрограмме недоступна переменная, описанная в основной программе.<br><br>
</LI>
<p><img src="img/sxema.gif" width="539" height="177"></P>
</OL>
<P>&nbsp;</P><P>&nbsp;</P>
<P><b><u><a name="5_4"></a>5.4 Параметры процедур и функций</u></b></P>
<P>&nbsp;</P>
<P><U><I>Формальные параметры</i></u> – это параметры, используемые
 при описании процедур и функций</P>
<P><U><I>Фактические параметры</i></u> – это параметры,
 используемые при вызове процедур и функций.</P>
<P>При вызове подпрограммы формальные параметры заменяются
 на соответствующие фактические параметры основной программы (!).</P>
<P>&nbsp;</P>
<P><u>Пример:</u></P>
<P class=code>varc: integer;</P>
<P></P>
<P class=code>procedure p(b: integer);</P>
<P class=code>begin</P>
<P class=code><b>&nbsp;</b><b>&nbsp;</b>…</P>
<P class=code>end;</P>
<P class=code>b – формальный параметр</P>
<P class=code>beginс – фактический параметр</P>
<P class=code>p(c);</P>
<P class=code>end.</P>
<P>&nbsp;</P>
<P></P>
<P>По способу описания и передачи значения формальные параметры
 делятся на <I><U>параметры-значения</u></I> и <I><U>параметры-переменные</u></I>.</P>
<UL>
<LI><u>Параметры-значения (имя: тип)</u></LI>
</UL>
<DIR>
<P>Изменение значения таких параметров в подпрограмме не
 приводит к изменениям соответствующих фактических параметров основной
 программы. В подпрограмму передается копия фактического параметра (его
 значение). Поэтому фактические параметры, соответствующие параметрам-значениям,
 могут быть <I>константами</I>, <I>переменными</I> или <I>выражениями</I>.
 Другими словами, параметр-значение считается обычной локальной переменной.
 При вызове подпрограммы начальное значение параметра автоматически устанавливается
 равным значению соответствующего фактического параметра, заданного при
 вызове. Внутри подпрограммы возможны любые действия с формальными параметрами,
 но эти изменения <I>никак не отражаются</I> на значениях переменных основной
 программы.</p><P>&nbsp;</p>
<P><u>Пример1:</u></p>
<P><img src="img/ex5_1.gif" width="448" height="165"></p>
<P>&nbsp;</p>
</DIR>
<UL>
<LI><u>Параметры-переменные ( (var имя: тип); )</u></LI>
</UL>
<DIR>
<P>Изменение формальных параметров в подпрограмме приводит
 к аналогичному изменению фактических параметров, используемых при вызове
 подпрограммы. Эти параметры используются для возврата значений из процедур
 (в функциях обычно не используются, т.к. функция возвращает значение через
 свое имя).</P>
<P>В подпрограмму передается адрес фактического параметра,
 а не его копия. (Формальный параметр считается <I>синонимом</I> соответствующего
 фактического параметра). Поэтому фактический параметр, соответствующий
 параметру-переменной, должен быть <I>переменной</I> того же типа, что
 и формальный параметр (константы или выражения не допускаются).</P>
<P></P><P>&nbsp;</p>
<P><U>Пример 1:<br></u></p>
<P><img src="img/ex5_1(2).gif" width="546" height="148"></p>
<P>&nbsp;</p>
<P><U>Пример2:</u> Программа вычисления объема шара V=4/3&#960;R<SUP>3<br>
 </sup></P>
<P><img src="img/ex5_2.gif" width="562" height="347"></P>
<P><br>
</P>
<P><b><u><a name="5_5"></a>5.5 Побочные эффекты при использовании
 подпрограмм</u></b></P>
<P>&nbsp;</P>
<P></P>
<P>Побочные эффекты возникают, когда изменение переменных
 в подпрограмме приводит к их нежелательным изменениям в основной программе</P>
<P><img src="img/ex5_3.gif" width="474" height="217"></P>
<P>&nbsp;</P>
<P></P><P></P><P></P>
<P>Процедура изменяет значение глобальной переменной S (!).
 Надо добавить в нее описание локальной S:</P>
<P></P>
<P class=code>procedure Sum(n: integer, var f: integer);</P>
<P class=code>vari: integer;</P>
<P class=code><font color="#ff0000">&nbsp;s: integer;</font></P>
<P class=code>begin</P>
<P class=code> …</P>
<P class=code>&nbsp;</P>
<P class=code>&nbsp;</P>
<P></P>
<P><b><u><a name="5_6"></a>5.6 Передача массивов в подпрограммы</u></b></P>
<P>&nbsp;</P>
<P><I>Типом формального параметра</i> подпрограммы может
 быть стандартный или заранее определенный тип, заданный <I>в виде идентификатора</I>
 (!). Поэтому описание процедуры следующего вида является <I>недопустимым</I>:</P>
<P class=code>procedure S(a: array [1..10] of real);</P>
<P>В связи с этим, если в качестве параметра необходимо
 использовать массив, то делается предварительное описание типа массива:</P>
<P class=code>typemas=array [1..10] of real;</P>
<P class=code>…</P>
<P class=code>procedure s(a: mas);</P>
<P class=code>begin</P>
<P class=code><font color="#ff0000">&nbsp;</font>…</P>
<P class=code>end;</P>
<P class=code>varb: mas;</P>
<P class=code><font color="#ff0000">&nbsp;</font><font color="#ff0000">&nbsp;</font><font color="#ff0000">&nbsp;</font>c:
 array [1..10] of real;</P>
<P class=code>begin</P>
<P class=code><font color="#ff0000">&nbsp;</font>S(b);</P>
<P class=code><font color="#ff0000">&nbsp;</font>S(c);
 - нельзя!</P>
<P class=code><font color="#ff0000">&nbsp;</font>…</P>
<P>&nbsp;</P>
<P></P>
<P>Массив может передаваться как <I>параметр-значение</I>,
 и как <I>параметр-переменная</I>. Если параметр массив описан со словом
 <B>var, </B>то изменение массива в подпрограмме приводит к изменению соответствующего
 массива в основной программе.</P>
<P>&nbsp;</P>
<P><u>Пример:</u></P>
<P class=code>typemas=array [1..10] of integer;</P>
<P class=code>varc,d: mas;</P>
<P class=code><font color="#ff0000">&nbsp;</font><font color="#ff0000">&nbsp;</font>i:
 integer;</P>
<P class=code>procedure S(a: mas, var b: mas);</P>
<P class=code><font color="#ff0000">&nbsp;</font>vari:
 integer;</P>
<P class=code>begin</P>
<P class=code><font color="#ff0000">&nbsp;</font>for
 i:=1 to 10 do</P>
<P class=code><font color="#ff0000">&nbsp;</font>begin</P>
<P class=code><font color="#ff0000">&nbsp;</font><font color="#ff0000">&nbsp;</font><font color="#ff0000">&nbsp;</font>a[i]:=a[i]*5;</P>
<P class=code><font color="#ff0000">&nbsp;</font><font color="#ff0000">&nbsp;</font><font color="#ff0000">&nbsp;</font>b[i]:=b[i]*5;</P>
<P class=code><font color="#ff0000">&nbsp;</font><font color="#ff0000"></font>end;</P>
<P class=code>end;<br>
</P>
<P class=code>begin</P>
<P class=code><font color="#ff0000">&nbsp;</font>for
 i:=1 to 10 do</P>
<P class=code><font color="#ff0000">&nbsp;</font>begin</P>
<P class=code><font color="#ff0000">&nbsp;</font><font color="#ff0000">&nbsp;</font><font color="#ff0000">&nbsp;</font>c[i]:=1;</P>
<P class=code><font color="#ff0000">&nbsp;</font><font color="#ff0000">&nbsp;</font><font color="#ff0000">&nbsp;</font>d[i]:=1;</P>
<P class=code><font color="#ff0000">&nbsp;</font>end;</P>
<P class=code><font color="#ff0000">&nbsp;</font>s(c,d);</P>
<P class=code><font color="#ff0000">&nbsp;</font>for
 i:=1 to 10 do write (c[i]:3); | 1 1 1 1 1 1 …</P>
<P class=code><font color="#ff0000">&nbsp;</font>writeln;</P>
<P class=code><font color="#ff0000">&nbsp;</font>for
 i:=1 to 10 do write (d[i]:3);| 5 5 5 5 5 5 …</P>
<P class=code>end.</P>
<P></P>
<P>&nbsp;</P>
<P>Следующие три пункта 5.7, 5.8 и 5.9 являются необязательными
 для изучения, хотя рассмотренный в них материал достаточно широко используется
 в программировании.</P>
<P></P>
<P>&nbsp;</P>
<P><b><u><a name="5_7"></a>5.7 Параметры-костанты</u></b></P>
<P>&nbsp;</P>
<P>В Турбо-Паскаль 7.0 существует еще один вид параметров
 – параметры-константы.</P>
<P>(const имя: тип)</P>
<P>В этом случае в подпрограмму передается адрес фактического
 параметра, но он защищен от изменений.</P>
<P>Чаще всего используется для передачи в подпрограмму массивов,
 которые не должны изменяться. В этом случае нельзя использовать параметр-переменную,
 а использование параметра-значения не эффективно, т.к. на копию массива
 требуется много памяти и может быть переполнение стека.</P>
<P>&nbsp;</P>
<P class=code>typemas=array [1..10] of real;</P>
<P class=code><font color="#ff0000">&nbsp;</font>vara:
 mas;</P>
<P class=code>function Summa (const x:mas): integer;</P>
<P class=code><font color="#ff0000">&nbsp;</font>var
 s,i: integer;</P>
<P class=code>begin</P>
<P class=code><font color="#ff0000">&nbsp;</font>s:=0;</P>
<P class=code><font color="#ff0000">&nbsp;</font>for
 i:=1 to 10 do s:=s+x[i];</P>
<P class=code><font color="#ff0000">&nbsp;</font>summa:=s;</P>
<P class=code>end;<br>
</P>
<P class=code>begin</P>
<P class=code><font color="#ff0000">&nbsp;</font>randomize;</P>
<P class=code><font color="#ff0000">&nbsp;</font>for
 i:=1 to 10 do a[i]:=random(20);</P>
<P class=code><font color="#ff0000">&nbsp;</font>writeln(‘сумма
 элементов массива: ’,summa(a));</P>
<P class=code>end.</P>
<P>&nbsp;</P><P>&nbsp;</P>
<P></P>
<P><b><u><a name="5_8"></a>5.8 Массивы открытого типа</u></b></P>
<P>&nbsp;</P>
<P>В Турбо-Паскаль 7.0 в качестве параметров-переменных
 можно использовать массивы открытого типа, у которых не задаются размеры.
 В этом случае подпрограмма может обрабатывать массив любого размера. Фактический
 размер массива может быть определен с помощью функции High. При описании
 не указывается тип индекса массива. Индексация элементов открытого массива
 всегда от 0 до значения функции High ( 0..high(x) , где x – имя массива).</P>
<P>&nbsp;</P>
<P class=code>function Summa (var x: array of real): real;</P>
<P class=code>vari: integer;</P>
<P class=code><font color="#ff0000">&nbsp;</font><font color="#ff0000">&nbsp;</font><font color="#ff0000">&nbsp;</font>s:
 real;</P>
<P class=code>begin</P>
<P class=code><font color="#ff0000">&nbsp;</font>s:=0;</P>
<P class=code><font color="#ff0000">&nbsp;</font>for
 i:=1 to high(x) do s:=s+x[i];</P>
<P class=code><font color="#ff0000">&nbsp;</font>summa:=s;</P>
<P class=code>end;</P>
<P>&nbsp;</P>
<P></P>
<P>&nbsp;</P>
<P><b><u><a name="5_9"></a>5.9 Рекурсия в подпрограммах</u></b></P>
<P>&nbsp;</P>
<P>В теле подпрограммы доступны все объекты, описанные в
 основной программе, в том числе и имя самой подпрограммы. Таким образом,
 внутри тела подпрограммы возможен вызов самой подпрограммы. Процедуры
 и функции, использующие вызовы “самих себя”, называются <I><U>рекурсивными</u></I>.</P>
<P>Многие математические алгоритмы имеют рекурсивную природу,
 поэтому рекурсия широко используется в программировании. В качестве примера
 приведем известный алгоритм вычисления факториала неотрицательного целого
 числа:</P>
<P>(0!=1)</P>
<P>1!=1</P>
<P>N!=1*2*3*…*(N-1)*N</P>
<P>алгоритм основан на соотношении N!=(N-1)!*N</P>
<P>&nbsp;</P>
<P><u>Пример:</u></P>
<P class=code>function fact(N: word): longint;</P>
<P class=code>begin</P>
<P class=code><font color="#ff0000">&nbsp;</font>if
 (n=0) or (n=1) then fact:=1</P>
<P class=code><font color="#ff0000">&nbsp;</font>else
 fact:=n*fact(n-1);</P>
<P class=code>end;</P>
<P>&nbsp;</P>
<P></P>
<P>При каждом новом обращении к подпрограмме параметры,
 которые она использует, заносятся в стек, причем параметры предыдущего
 обращения тоже сохраняются.</P>
<P>Рекурсивное оформление программы более компактно и эффективно,
 но не следует забывать об опасности переполнения стека (!).</P>
<P>Схема вызовов при вычислении 5!:</P>
<P><img src="img/pic.gif" width="341" height="92"></P>
 <p></P>
<P></P>
<P>&nbsp;</P><P>&nbsp;</P>
<P><b><u><a name="z"></a>Задачи для самоконтроля</u></b></P>
<P></P>
<P><B>5.1 </b>Определите значение переменных a, b после
 выполнения следующих программ:</P>
<P></P>
 <TABLE BORDER CELLSPACING=1 CELLPADDING=1 WIDTH=400>
<TR>
 <TD WIDTH="54%" VALIGN=TOP class=code> а)<br>
 vara,b: integer;<br>
 procedure proc(x: integer; y: integer); <br>
 begin<br>
 <font color="#ff0000">&nbsp;</font>y:= y+2; x:= x+2;<br>
 end;<br>
 begin<br>
 <font color="#ff0000">&nbsp;</font>a:=15; b:=15;<br>
 <font color="#ff0000">&nbsp;</font>proc(a,b);<br>
 <font color="#ff0000">&nbsp;</font>writeln(‘a = ’,a,’ b= ‘,b);<br>
 end.</TD>
</TR>
 <TR class=code>
 <TD WIDTH="54%" VALIGN=TOP>б)<br>
 vara,b: integer;<br>
 procedure proc(x: integer; var y: integer);<br>
 begin<br>
 <font color="#ff0000">&nbsp;</font>y:= y+2; x:= x+2;<br>
 end;<br>
 begin<br>
 <font color="#ff0000">&nbsp;</font>a:=15; b:=15;<br>
 <font color="#ff0000">&nbsp;</font>proc(a,b);<br>
 <font color="#ff0000">&nbsp;</font>writeln(‘a = ’,a,’ b= ‘,b);<br>
 end. </TD>
</TR>
 <TR class=code>
 <TD VALIGN=TOP>в)<br>
 vara,b: integer;<br>
 procedure proc(var x: integer; y: integer);<br>
 begin<br>
 <font color="#ff0000">&nbsp;</font>y:= y+2; x:= x+2;<br>
 end;<br>
 begin<br>
 <font color="#ff0000">&nbsp;</font>a:=15; b:=15;<br>
 <font color="#ff0000">&nbsp;</font>proc(a,b);<br>
 <font color="#ff0000">&nbsp;</font>writeln(‘a = ’,a,’ b= ‘,b);<br>
 end.</TD>
</TR>
 <TR class=code>
 <TD VALIGN=TOP>г)<br>
 vara,b: integer;<br>
 procedure proc(x: integer; var y: integer);<br>
 begin<br>
 <font color="#ff0000">&nbsp;</font>y:= y+2; x:= x+2;<br>
 end;<br>
 begin<br>
 <font color="#ff0000">&nbsp;</font>a:=15; b:=15;<br>
 <font color="#ff0000">&nbsp;</font>proc(a,b);<br>
 <font color="#ff0000">&nbsp;</font>writeln(‘a = ’,a,’ b= ‘,b);<br>
 end.</TD>
</TR>
 </TABLE>
<P>&nbsp;</P><P>&nbsp;</P>
</td>
</TR>
</table>
<hr>
<div align=center><font size=2 face=Arial color="#0000FF"><a href="lec4.htm">назад</a>
 | <a href="index_lec.htm">оглавление</a> | <a href="lec6.htm"> вперёд</a></font></div>
</BODY>
</HTML>
