<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<TITLE></TITLE>
<style type="text/css">
p {
margin:0cm;
margin-bottom:.0001pt;
text-align:justify;
text-indent:35.45pt;
mso-pagination:widow-orphan;
font-size:12.0pt;
font-family:"arial";
mso-fareast-font-family:"arial";
}
.code{font-family:"Courier New";font-size:10pt}
</style>
</HEAD>
<BODY>
<basefont face=arial size=3>
<B></B>
<table border="0" cellpadding="0" cellspacing="0" width="100%"
 height="31">
<TR>
 <TD width="100%" bgcolor="#000000"><div align=right><font color="#FFFFFF" size=3 face=Arial><b>Программирование
 на языках высокого уровня. Язык программирования Паскаль&nbsp;</b></font></div></td>
</TR>
</table>
<table border="0" cellpadding="2" cellspacing="0" width="100%" height="35">
<TR>
 <TD width="486" bgcolor=gray height="26">
<P align=right>&nbsp;</p>
 </td>
 <TD width="230" bgcolor="#EEE0BF" height="26"><p align=center><font size=2 face=Arial color="#0000FF"><a href="P6.htm">
</a><a href="lec6.htm">назад</a> | <a href="index_lec.htm">оглавление</a>
| <a href="lec8.htm"> вперёд</a></font></p>
 </td>
 <TD width="43" height="26">&nbsp;</td>
</TR>
</table><br>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<TR>
 <TD><div align=center></div>
 <P><b>7. Стандартные модули Турбо-Паскаля</b></P>
<P>&nbsp;</P>
<P></P>
<P>Модуль представляет собой совокупность программных ресурсов,
 предназначенных для использования другими программами. Стандартные модули
 включают в себя стандартные константы, переменные, процедуры и функции
 Турбо-Паскаля. Стандартный модуль можно рассматривать как библиотеку подпрограмм.
</P>
<P>В составе Турбо-Паскаль 6.0 имеются 8 стандартных модулей:</P>
<UL>
 <LI>system</LI>
 <LI>dos</LI>
 <LI>crt</LI>
 <LI>printer</LI>
 <LI>overlay</LI>
 <LI>graph</LI>
 <LI>Турбо3</LI>
 <LI>graph3</LI>
 <LI>strings &nbsp; &nbsp; &nbsp;- (модули Турбо-Паскаль 7.0. используются
 для совместимости с другими )</LI>
 <LI>windows &nbsp; &nbsp; (языками и средой Windows)</LI>
</UL>
<P>Для использования процедур или функций данного модуля
 необходимо подключить его с помощью оператора</P>
<P><b>uses имя модуля1 [, имя модуля2, …];</b></P>
<P>Модуль system подключается автоматически.</P>
<P>&nbsp;</P>
<P></P>
<P><b><u><a name="7_1"></a>7.1 Модули ТУРБО3 и GRAPH3</u></b></P>
<P>&nbsp;</P>
<P>Обеспечивают совместимость с программами, разработанными
 ранее для ТР 3.0</P>
<P>&nbsp;</P>
<P></P>
<P></P>
<P></P>
<P><b><u><a name="7_2"></a>7.2 Модуль OVERLAY</u></b></P>
<P>&nbsp;</P>
<P>Предоставляет средства для разработки оверлейных программ
 (размер которых превышает объем доступной оперативной памяти, и которые
 загружаются в память по частям)</P>
<P>&nbsp;</P>
<P></P>
<P><b><u><a name="7_3"></a>7.3 Модуль DOS</u></b></P>
<P>&nbsp;</P>
<P>Содержит средства доступа к операционной системе DOS
 (процедуры и функции для работы с дисками, файлами, системной датой, временем).</P>
<P>&nbsp;</P>
<P></P>
<P><b><u><a name="7_4"></a>7.4 Модуль SYSTEM</u></b></P>
<P>&nbsp;</P>
<P>Содержит процедуры и функции стандартного Паскаля и некоторые
 другие основные процедуры и функции.</P>
<P><I><B>inc (x[,n])</b></i> – увеличение значения переменной
 x на n единиц (инкремент).</P>
<P><I><B>dec (x[,n])</b></i> – уменьшение значения переменной
 x на n единиц (декремент).</P>
<P><u>Пример:</u></P>
<P><span class=code>x:=x+1;inc(x);</span></P>
<P class=code>x:=x+5; inc(x,5);</P>
<P class=code>y:=y-1; dec(y);</P>
<P class=code>y:=y-6; dec(y,6);</P>
<P>&nbsp;</P>
<P><I><B>high(x)</b></i> – получение максимального значения
 величины х; если х – массив, то максимального значения индекса.</P>
<P><u>Пример:</u></P>
<P><span class=code>vary: word;</span></P>
<P class=code>…</P>
<P class=code>writeln(high(y)); &nbsp;| 65535</P>
<P><I><B>low(x)</b></i> – получение минимального значения
 величины х; если х – массив, то минимального значения индекса.</P>
<P><u>Пример:</u></P>
<P><span class=code>vary: integer;</span></P>
<P class=code>…</P>
<P class=code>writeln(low(y)); &nbsp;|-32768</P>
<P><I><B>exit</b></i> – немедленный выход из подпрограммы.</P>
<P><I><B>halt</b></i> – прекращение выполнения программы
 и передача управления операционной системе.</P>
<P>&nbsp;</P>
<P><u>Пример:</u></P>
<P>writeln(‘Введите x&gt;0’);</P>
<P>readln(x);</P>
<P>if x&lt;=0 then halt;</P>
<P>&nbsp;</P><P>&nbsp;</P>
<P></P>
<P><b><u><a name="7_5"></a>7.5 Модуль PRINTER</u></b></P>
<P>&nbsp;</P>
<P>Делает доступным вывод результатов работы программы на
 печатающее устройство, связывая стандартную переменную LST с принтером.</P>
<P>&nbsp;</P>
<P><u>Пример:</u></P>
<P><span class=code>usesprinter;</span></P>
<P class=code>vara: integer;</P>
<P class=code>begin</P>
<P class=code>a:=20;</P>
<P class=code>writeln(lst,’a=’,a); {вывод на принтер a=20}</P>
<P class=code>end.</P>
<P>&nbsp;</P><P>&nbsp;</P>
<P></P>
<P><b><u><a name="7_6"></a>7.6 Модуль CRT</u></b></P>
<P>&nbsp;</P>
<P>Содержит процедуры и функции управления экраном в текстовом
 режиме, управления звуком и работы с клавиатурой.</P>
<P><IMG SRC="img/Image1454.gif" WIDTH=250 HEIGHT=139></P>
<P>При работе <I><U>в текстовом режиме</u></I> весь экран
 разбивается на позиции (25 строк по 80 позиций в каждой). Для каждой позиции
 можно задать цвет фона и цвет символа, символ можно сделать мерцающим.</P>
<P>Координаты 1 позиции (верхний левый угол) – (1,1), последней
 позиции (нижний правый угол) – (80,25).</P>
<P>На экране можно создать <I>текстовое окно</I>, которое
 задается координатами верхнего левого и нижнего правого углов. При работе
 <I>внутри окна</I> координаты отсчитываются от верхнего левого угла.</P>
<P>&nbsp;</P>
<P></P>
<P><b><i><u>Процедуры и функции модуля CRT (управление звуком
 и клавиатурой)</u></i></b></P>
<P></P>
<P><I><B>keypressed: boolean;</b></i> - возвращает true,
 если была нажата любая клавиша (кроме ^, shift, alt…) и false в противном
 случае. Не останавливает программу в ожидании нажатия клавиши, поэтому
 можно repeat…until keypressed; (вместо readln;)</P>
<P></P>
<P><I><B>readkey: char;</b></i> - считывает символ нажатой
 клавиши (без отображения на экране). Приостанавливает выполнение программы
 до нажатия любой клавиши, кроме служебных (ctrl, alt, shift…)</P>
<P>if keypressed then ch:=readkey:</P>
<P>Код обычных клавиш (цифры, алфавит) хранится в 1 байте,
 коды функциональных клавиш (F1…F12) – в двух байтах: первый = 0, второй
 – код клавиши. Поэтому, чтобы считать код функциональной клавиши, надо
 2 раза вызвать функцию readkey: при первом вызове она считает 0, при втором
 – непосредственно код клавиши.</P>
<P>&nbsp;</P>
<P><u>Пример:</u></P>
<P><span class=code>uses Crt;</span></P>
<P class=code>var ch:char;</P>
<P class=code>begin</P>
<P class=code> &nbsp; &nbsp;writeln(‘Нажмите клавишу’);</P>
<P class=code> &nbsp; &nbsp;ch:=readkey;</P>
<P class=code> &nbsp; &nbsp;if ch&lt;&gt;#0 then writeln(‘Клавиша
 ’, ch)</P>
<P class=code> &nbsp; &nbsp;else begin</P>
<P class=code> &nbsp; &nbsp; &nbsp;ch:=readkey;</P>
<P class=code> &nbsp; &nbsp; &nbsp;writeln(‘функциональная
 клавиша ’, ord(ch));</P>
<P class=code> &nbsp; &nbsp;end;</P>
<P class=code>end.</P>
<P>&nbsp;</P>
<P><I><B>delay (t);</b></i> - приостанавливает работу программы
 на время t (милисекунд).</P>
<P><I><B>sound (f);</b></i> - включает звук заданной частоты
 (в Гц).</P>
<P><I><B>nosound;</b></i> - выключает звук</P>
<P>&nbsp;</P>
<P><u>Пример:</u></P>
<P class=code>sound(440); delay(500); nosound;</P>
<P>&nbsp;</P>
<P></P>
<P><U>Пример:</u> Имитация музыкального инструмента.</P>
<P class=code>uses crt;</P>
<P class=code>constm: array [1..8] of integer = (262,294,330,350,392,440,494,523);</P>
<P class=code>vari: integer;</P>
<P class=code> &nbsp; &nbsp; &nbsp;ch: char;</P>
<P class=code>begin</P>
<P class=code> &nbsp; &nbsp;writeln(‘Играйте на клавишах
 1-8; 0 - выход’);</P>
<P class=code> &nbsp; &nbsp;while true do</P>
<P class=code> &nbsp; &nbsp;begin</P>
<P class=code> &nbsp; &nbsp; &nbsp;ch:=readkey;</P>
<P class=code> &nbsp; &nbsp; &nbsp;case ch of</P>
<P class=code> &nbsp; &nbsp; &nbsp; &nbsp;#49: i:=1;</P>
<P class=code> &nbsp; &nbsp; &nbsp; &nbsp;#50: i:=2;</P>
<P class=code> &nbsp; &nbsp; &nbsp; &nbsp;…</P>
<P class=code> &nbsp; &nbsp; &nbsp; &nbsp;#56: i:=8;</P>
<P class=code> &nbsp; &nbsp; &nbsp; &nbsp;#48: halt;</P>
<P class=code> &nbsp; &nbsp; &nbsp;end;</P>
<P class=code> &nbsp; &nbsp; &nbsp;sound(m[i]);</P>
<P class=code> &nbsp; &nbsp; &nbsp;delay(1000);</P>
<P class=code> &nbsp; &nbsp; &nbsp;nosound;</P>
<P class=code> &nbsp; &nbsp;end;</P>
<P class=code>end.</P>
<P class=code>&nbsp;</P>
<P><b><i><u>Константы модуля CRT (коды цветов и режимов)</u></i></b></P>
<P><img src="img/codes.gif" width="648" height="310"></P>
<P>&nbsp;</P>
<P><b><i><u>Процедуры и функции управления экраном</u></i></b></P>
<P><I><B>clrscr;</b></i> - очистка активного окна и перевод
 курсора в верхний левый угол.</P>
<P><I><B>clreol;</b></i> - очистка строки активного окна
 от текущей позиции курсора до конца строки.</P>
<P></P>
<P><I><B>insline;</b></i> - вставляет новую пустую строку
 в позицию курсора, заполняет ее цветом фона.</P>
<P><I><B>delline;</b></i> - удаляет строку, на которой стоит
 курсор. Остальные строки сдвигаются (&#8593; или &#8595;).</P>
<P></P>
<P><I><B>highvideo;</b></i> - переход к более яркому цвету
 <U>символов </U>(0&#8594;8, 1&#8594;9,…, 7&#8594;15).</P>
<P><I><B>lowvideo;</b></i> - переход к менее яркому цвету
 <U>символов </U>(8&#8594;0, 9&#8594;1,…, 15&#8594;7).</P>
<P><I><B>normvideo;</b></i> - переход к стандартному цвету
 <U>символов</U> (7)</P>
<P></P>
<P><I><B>textmode (m);</b></i> - установка текстового режима.
 По умолчанию - СО80.</P>
<P><I><B>textbackground (col);</b></i> - установка цвета
 фона (col = 0-7).</P>
<P><I><B>textcolor (col);</b></i> - установка цвета символов
 (col = 0-15).</P>
<P></P>
<P><I><B>window (x1,y1,x2,y2);</b></i> - определяет текстовое
 окно на экране.</P>
<P><I><B>gotoxy (x,y);</b></i> - переводит курсор в заданную
 позицию окна. (х,у) – координаты нового положения курсора.</P>
<P></P>
<P><I><B>whereX: byte;</b></i> - возвращает координату х
 текущей позиции курсора.</P>
<P><I><B>whereY: byte;</b></i> - возвращает координату у
 текущей позиции курсора.</P>
<P>&nbsp;</P>
<P></P>
<P><U>Пример 1:</u> Сформировать на экране текстовое окно
 другого цвета и напечатать в середине окна приветствие.</P>
<P class=code>uses crt;</P>
<P class=code>begin</P>
<P class=code>&nbsp;textmode(3);</P>
<P class=code>&nbsp;textbackground(2);</P>
<P class=code>&nbsp;clrscr;</P>
<P class=code>&nbsp;textcolor(14);</P>
<P class=code>&nbsp;window(20,10,60,15);</P>
<P class=code>&nbsp;textbackground(6);</P>
<P class=code>&nbsp;clrscr;</P>
<P class=code>&nbsp;gotoxy(15,3);</P>
<P class=code>&nbsp;writeln(‘Hello’);</P>
<P class=code>&nbsp;delay(1000);</P>
<P class=code>&nbsp;textmode(3);</P>
<P class=code>end.</P>
<P>&nbsp;</P>
<P></P>
<P><U>Пример 2:</u> Программа выводит на экран последовательность
 цифр 0..9, стрелками &#8592; &#8594; выбирает и подсвечивает любую цифру.</P>
<P></P>
<P>&nbsp;</P>
<P><img src="img/codes2.gif" width="355" height="110"></P>
<P>&nbsp;</P>
 <p></P>
<P></P>
<P class=code>uses crt;</P>
<P class=code>varx,y,i: integer;</P>
<P class=code>&nbsp;&nbsp;&nbsp;ch:
 char;</P>
<P class=code>procedure Put(x,y,i,col: integer);</P>
<P class=code>begin</P>
<P class=code>&nbsp;textbackground(col);</P>
<P class=code>&nbsp;gotoxy(x+i*3,y);</P>
<P class=code>&nbsp;write(‘ ’,i,’ ’);</P>
<P class=code>&nbsp;gotoxy(x+i*3+1,y);</P>
<P class=code>end;<br>
</P>
<P class=code>begin</P>
<P class=code>&nbsp;textmode(3);</P>
<P class=code>&nbsp;clrscr;</P>
<P class=code>&nbsp;y:=13; x:=25;</P>
<P class=code>&nbsp;for i:=0 to 9 do put(x,y,i,1);</P>
<P class=code>&nbsp;&nbsp;i:=0; put(x,y,i,2);</P>
<P class=code>&nbsp;&nbsp;repeat</P>
<P class=code>&nbsp;&nbsp;&nbsp;ch:=readkey;</P>
<P class=code>&nbsp;&nbsp;&nbsp;put(x,y,i,1);</P>
<P class=code>&nbsp;&nbsp;&nbsp;if
 ch = #75 then dec(i);</P>
<P class=code>&nbsp;&nbsp;&nbsp;if
 ch = #77 then inc(i);</P>
<P class=code>&nbsp;&nbsp;&nbsp;if i&lt;0
 then i:=9;</P>
<P class=code>&nbsp;&nbsp;&nbsp;if
 i&gt;9 then i:=0;</P>
<P class=code>&nbsp;&nbsp;&nbsp;put(x,y,i,2);</P>
<P class=code>&nbsp;until ch=#27; {esc}</P>
<P class=code>&nbsp;textmode(3);</P>
<P class=code>end.</P>
<P>&nbsp;</P>
<P></P>
<P><u>Вариант без процедуры:</u></P>
<P class=code>uses crt;</P>
<P class=code>varx,y,i: integer;</P>
<P class=code>&nbsp;&nbsp;&nbsp;ch:
 char;</P>
<P class=code>procedure Put(x,y,i,col: integer);</P>
<P class=code>begin</P>
<P class=code>&nbsp;&nbsp;gotoxy(x+i*3,y);</P>
<P class=code>&nbsp;&nbsp;write(‘
 ’,i,’ ’);</P>
<P class=code>&nbsp;&nbsp;gotoxy(x+i*3+1,y);</P>
<P class=code>end;<br>
</P>
<P class=code>begin</P>
<P class=code>&nbsp;textmode(3);</P>
<P class=code>&nbsp;clrscr;</P>
<P class=code>&nbsp;y:=13; x:=25;</P>
<P class=code>&nbsp;textbackground(1);</P>
<P class=code>&nbsp;for i:=0 to 9 do </P>
<P class=code>&nbsp;begin</P>
<P class=code>&nbsp;&nbsp;&nbsp;gotoxy(x+i*3,y);</P>
<P class=code>&nbsp;&nbsp;&nbsp;write(‘
 ’,i,’ ’);</P>
<P class=code>&nbsp;end;</P>
<P class=code>&nbsp;i:=0;</P>
<P class=code>&nbsp;textbackground(2);</P>
<P class=code>&nbsp;gotoxy(x+i*3,y);</P>
<P class=code>&nbsp;write(‘ ’,i,’ ’);</P>
<P class=code>&nbsp;gotoxy(x+i*3+1,y);</P>
<P class=code>&nbsp;repeat</P>
<P class=code>&nbsp;&nbsp;ch:=readkey;</P>
<P class=code>&nbsp;&nbsp;if ch = #0 then</P>
<P class=code>&nbsp;&nbsp;begin</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;ch:=readkey;</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;textbackground(1);{}</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;gotoxy(x+i*3,y);{стирает
 подсветку}</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;write(‘
 ’,i,’ ’);{}</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;if
 ch = #75 then dec(i);</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;if
 ch = #77 then inc(i);</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;if
 i&lt;0 then i:=9;</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;if
 i&gt;9 then i:=0;</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;textbackground(2);</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;gotoxy(x+i*3,y); //подсвечивает
 другую цифру</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;write(‘
 ’,i,’ ’);</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;gotoxy(x+i*3+1,y);</P>
<P class=code>&nbsp;&nbsp;end;</P>
<P class=code>&nbsp;&nbsp;until ch=#27; {esc}</P>
<P class=code>&nbsp;&nbsp;textmode(3);</P>
<P class=code>end.</P>
<P></P>
<P>&nbsp;</P><P>&nbsp;</P>
<P><b><u><a name="7_7"></a>7.7 Модуль GRAPH</u></b></P>
<P>&nbsp;</P>
<P>Cодержит процедуры и функции, обеспечивающие работу с
 экраном в графическом режиме (создание изображений).</P>
 <OL>
 <LI>В графическом режиме весь экран разбивается на точки (пиксели – от
 англ. pixel). Каждую точку <I>можно </I>закрасить в любой цвет, таким
 образом из различных комбинаций точек создается изображение.</LI>
 <p></P>
 <LI>Каждая точка имеет координаты (х, у), х увеличивается по горизонтали
 слева направо, у – по вертикали сверху вниз. Верхний левый угол имеет
 координаты (0, 0), количество пикселей зависит от типа видеоадаптера
 и режима его работы. Для адаптера VGA – 640х480 (стандартный режим).
 Чем больше пикселей (точек), тем выше качество изображения.</LI>
 <p></P>
 <P>{<I>Драйвер устройства</I> – программа управления устройством.</P>
 <P><I>Видеоадаптер</i> – системное устройство, непосредственно
 управляющее монитором и выводом информации на экран. Основные части
 – видеоконтроллер, видеоBIOS, видеопамять и т.д.}</P>
 <LI>В графическом режиме можно выделить на экране графическое окно, тогда
 координаты отсчитываются внутри окна, верхний левый угол считается точкой
 (0,0).</LI>
 <p></P>
 <LI>В графическом режиме, в отличие от текстового, курсор невидим на экране,
 но также можно переместить его в любую точку экрана, получить его текущие
 координаты.</LI>
 <p></P>
 </OL>
<P></P>
<P><b><i><u>Процедуры и функции управления графическими
 режимами.</u></i></b></P>
<P></P>
<P><I><B>initgraph (gd, gm, path);</b></i> - процедура инициализации
 графического режима.</P>
<P>gd – код драйвер графического адаптера:</P>
<P> &nbsp;&nbsp;для CGA gd=1 или CGA</P>
<P>&nbsp;&nbsp;для EGA gd=3 или EGA</P>
<P>&nbsp;&nbsp;для VGA gd=9 или VGA</P>
<P>для автоматического определения драйвера gd=0 или
 Detect;</P>
<P>gm – код графического режима, устанавливается процедурой.</P>
<P>gd, gm – переменные целого типа!</P>
<P>path – строка, содержащая путь к драйверу: ‘c:\tp6\bgi’,
 т.е. вам надо сначала найти файл GRAPH.TPU и</P>
<P> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;здесь
 указать путь до этого файла.</P>
<P><I><B>closegraph;</b></i> - процедура завершения графического
 режима и перехода в текстовый режим.</P>
<P><I><B>graphresult: integer;</b></i> - возвращает код
 ошибки последней графической операции (0 – успешное выполнение).</P>
<P><I><B>grapherrormsg (cool: intrger):string;</b></i> -
 возвращает сообщение об ошибке для заданного кода ошибки.</P>
<P><I><B>restorecrtmode;</b></i> - процедура восстановления
 текстового режима.</P>
<P><I><B>setgraphmode (gm);</b></i> - процедура установления
 графического режима.</P>
<P>&nbsp;</P>
<P><u>Пример 1.</u></P>
<P class=code>uses crt, graph;</P>
<P class=code>vargd, gm: integer;</P>
<P class=code>begin</P>
<P class=code>&nbsp;&nbsp;gd:=detect;</P>
<P class=code>&nbsp;&nbsp;initgraph (gd, gm, ‘c:\tp6\bgi’);
 {укажите правильный путь до bgi}</P>
<P class=code>&nbsp;&nbsp;if graphresult &lt;&gt;
 0 then</P>
<P class=code>&nbsp;&nbsp;begin</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;write (‘ошибка
 графики:’, grapherrormsg (graphresult));</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;halt;</P>
<P class=code>&nbsp;&nbsp;end;</P>
<P class=code>&nbsp;&nbsp;…</P>
<P class=code>&nbsp;&nbsp;closegraph;</P>
<P class=code>end.</P>
<P>&nbsp;</P>
<P></P>
<P><b><i><u>Процедуры управления экраном и окном.</u></i></b></P>
<P><I><B>cleardevice</b>;</i> - процедура очистки графического
 экрана, заполнения его цветом фона, установления курсора в (0,0).</P>
<P><I><B>setviewport (x1, y1, x2, y2: integer; clip: boolean);</b></i>
 - процедура установки графического окна.</P>
<P>x1, y1 – верхний левый угол,</P>
<P>x2, y2 – нижний правый угол,</P>
<P>clip – ограничитель фигур. Если clip=true, то построение
 фигур происходит только в пределах окна, в противном случае фигуры могут
 выходить за пределы окна.</P>
<P><I><B>clearviewport;</b></i> - процедура очистки графического
 окна (заполняет цаетом фона, курсор в (0,0)).<br>
</P>
<P></P>
<P><b><i><u>Процедуры и функции работы с точками.</u></i></b></P>
<P><I><B>GetmaxX: integer;</b></i> - возвращает максимальное
 значение координаты x экрана.</P>
<P><I><B>GetmaxY: integer;</b></i> - возвращает максимальное
 значение координаты y экрана.</P>
<P><I><B>GetX: integer;</b></i> - возвращает координату
 x текущей позиции на экране.</P>
<P><I><B>GetY: integer;</b></i> - возвращает координату
 y текущей позиции на экране.</P>
<P><I><B>GetPixel (x,y): word;</b></i> - возвращает цвет
 точки с заданными координатами.</P>
<P><I><B>PutPixel (x,y,color);</b></i> - процедура закрашивает
 точки с координатами (x,y) в цвет color.</P>
<P></P>
<P><i><u><b>Процедуры работы с линиями</b></u></i></P>
<P><I><B>line (x1, y1, x2, y2);</b></i> - проводит прямую
 между точками (x1,y1) и (x2,y2).</P>
<P><I><B>moveto (x,y);</b></i> - перемещает курсор в точку
 (х,у).</P>
<P><I><B>lineto (x,y);</b></i> - проводит прямую из текущей
 точки в точку с координатами (x,y).</P>
<P><I><B>linerel (dx,dy);</b></i> - проводят прямую из текущей
 точки в точку, сдвинутую на dx и dy: (x+dx, y+dy).</P>
<P><I><B>moverel (dx,dy);</b></i> - перемещает курсор в
 точку, сдвинутую на dx, dy.</P>
<P></P>
<P><b><i><u>Процедуры построения фигур из линий.</u></i></b></P>
<P><I><B>bar (x1, y1, x2, y2);</b></i> - построение закрашенного
 прямоугольника </P>
<P><img src="img/bar.gif" width="155" height="70"></P>
<P>&nbsp;</P>
<P><I><B>bar3d (x1, y1, x2, y2, gr, top);</b></i> - построение
 закрашенного параллелепипеда, gr – ширина боковой грани (отсчитывается
 по горизонтали), top = true – рисовать верхнюю грань</P>
<P><img src="img/bar2.gif" width="182" height="93"></P>
<P>&nbsp;</P>
<P></P>
<P></P>
<P></P>
<P><I><B>rectangle (x1, y1, x2, y2);</b></i> - построение
 контура прямоугольника</P>
<P><I><B>arc (x, y, st, end, r);</b></i> - построение дуги
 окружности, (х,у) – координаты центра, st – угол начала, end – угол конца
 дуги, r – радиус. Отсчет идет против часовой стрелки от горизонтальной
 оси справа от центра.</P>
<P><I><B>circle (x, y, r);</b></i> - построение окружности,
 (х,у) – центр, r – радиус.</P>
<P><I><B>ellipse (x, y, st, end, xr, yr);</b></i> - построение
 дуги эллипса, (x,y) – центр, st, end – углы начала и конца, xr, yr – радиусы
 по оси х и у.</P>
<P><I><B>fillellipse (x, y, xr, yr);</b></i> - построение
 закрашенного эллипса.</P>
<P><I><B>pieslice (x, y, st, end, r);</b></i> - построение
 закрашенного сектора круга.</P>
<P><I><B>sector (x, y, st, end, xr, yr);</b></i> - построение
 закрашенного сектора эллипса.<br>
</P>
<P><u>Пример:</u></P>
<P><img src="img/Image1455.gif" width=212 height=80></P>
<P class=code>x1:=10; y1:=10; x2:=100; y2:=50; dx:=40;
 dy:=20;</P>
<P class=code>for i:=1 to 10 do </P>
<P class=code>begin</P>
<P class=code>&nbsp;bar(x1, y1, x2, y2);</P>
<P class=code>&nbsp;&nbsp;x1:=x1+dx; x2:=x2+dx;</P>
<P class=code>&nbsp;&nbsp;y1:=y1+dy; y2:=y2+dy;</P>
<P class=code>end;</P>
<P>&nbsp;</P>
<P></P>
<P><b><i><u>Процедуры установки цветов и стилей.</u></i></b></P>
<P><I><B>setcolor (color);</b></i> - устанавливает текущий
 цвет рисования (для линий и текста).</P>
<P><I><B>setbkcolor (color);</b></i> - устанавливает цвет
 фона экрана.</P>
<P><I><B>setlinestyle (sl, p,t);</b></i> - установка стиля
 и толщины линии (sl – стиль, p – шаблон при sl=4, t – толщина линии).</P>
<P><img src="img/lines.gif" width="546" height="210"></P>
<P>&nbsp;</P>
<P>
<P>
<P><I><B>floodfill (x, y, colline);</b></i> - закрашивает замкнутую
 область, ограниченную непрерывной линией. (х,у) – координаты любой точки
 внутри области, colline – цвет линии, до которой закрашивается.</P>
<P>&nbsp;</P>
<P></P>
<P><U>Пример:</u> Построить спираль с начальной точкой (хс,ус),
 n витками и начальным углом &#945;.</P>
<P class=code>usescrt, graph;</P>
<P class=code>&nbsp;constn=10; alf=pi; dt=pi/45;</P>
<P class=code>vargd, gm, x, y, xc, yc, i, j: integer;</P>
<P class=code>procedure Spi(xc,yc,n: integer; dt,alf:
 real);</P>
<P class=code>begin</P>
<P class=code>&nbsp;&nbsp;moveto(xc,yc);</P>
<P class=code>&nbsp;&nbsp;t:=alf;</P>
<P class=code>&nbsp;&nbsp;for i:=1 to n do</P>
<P class=code>&nbsp;&nbsp;&nbsp;for j:=1 to 90 do</P>
<P class=code>&nbsp;&nbsp;&nbsp;begin</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;t:=t+dt;
 r:=2*t;</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;x:=round(r*cos(t)+xc);//x=r*cos(t)окружность,
 t-угол.</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;y:=round(r*sin(t)+yc);//y=r*sin(t)r
 увеличиваем, получаем</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;lineto(x,y);спираль.</P>
<P class=code>&nbsp;&nbsp;&nbsp;end;</P>
<P class=code>end;</P>
<P class=code>&nbsp;</P>
<P class=code>begin</P>
<P class=code>&nbsp;gd:=detect;</P>
<P class=code>&nbsp;initgraph (gd, gm, ‘L:\tp6\bgi’);</P>
<P class=code>&nbsp;if graphresult &lt;&gt; 0 then</P>
<P class=code>&nbsp;begin</P>
<P class=code>&nbsp;&nbsp;write (‘ошибка графики:’,
 grapherrormsg (graphresult));</P>
<P class=code>&nbsp;&nbsp;halt;</P>
<P class=code>&nbsp;end;</P>
<P class=code>&nbsp;xc:=getmxx div 2;</P>
<P class=code>&nbsp;yc:=getmaxy div 2;</P>
<P class=code>&nbsp;spi(xc,yc,n,dt,alf);</P>
<P class=code>&nbsp;readln;</P>
<P class=code>&nbsp;closegraph;</P>
<P class=code>end.</P>
<P class=code>&nbsp;</P><P></P>
<P><b><u>Процедуры работы с текстом.</u></b></P>
<P><I><B>outtext (text: string);</b></i> - выводит на экран
 текстовую строку, начиная с текущей позиции.</P>
<P>outtext(‘hello’);</P>
<P><I><B>outtextxy (x, y, text);</b></i> - выводит на экран
 текстовую строку, начиная с заданных координат (х,у).</P>
<P>outtextxy(100,100,‘hello’);</P>
<P><I><B>settextstyle (font, dir, size);</b></i> - устанавливает
 стиль текста</P>
<P><U>font – шрифт</U><U>dir – направление</U><U>size
 – размер символов</u></P>
<P>0 – стандартный0 – слева направо(0-30)</P>
<P>1 – утроенный1 – сверху вниз</P>
<P>2 – маленький</P>
<P>3 – прямой</P>
<P>4 – готический</P>
<P><I><B>settextjustify (horiz, vert);</b></i> - устанавливает
 выравнивание текста на экране (horiz-горизонтальное, vert-вертикальное).</P>
<P>0 – слева (снизу)</P>
<P>1 – по центру</P>
<P>2 – справа (сверху)</P>
<P></P>
<P><b><u>Процедуры обмена с памятью</u></b></P>
<P><I><B>getimage (x1, y1, x2, y2, M);</b></i> - копирует
 в массив М прямоугольную область экрана, заданную координатами (х1,у1)
 и (х2,у2).</P>
<P><I><B>putimage (x, y, M, bit); </b></i>- выводит изображение
 из массива М на экран. (х,у) – координаты точки, в которой будет левый
 верхний угол изображения, М – массив, в котором было сохранено изображение,
 bit – операция объединения выводимого изображения с имеющимся на экране.</P>
<P>0 – mov экран <IMG SRC="img/Image1459.gif" WIDTH=20 HEIGHT=20>
 + массив <IMG SRC="img/Image1460.gif" WIDTH=20 HEIGHT=20> &#8594; <IMG SRC="img/Image1460.gif" WIDTH=20 HEIGHT=20>-
 старое изображение исчезает</P>
<P>1 – xor<IMG SRC="img/Image1459.gif" WIDTH=20 HEIGHT=20>
 + <IMG SRC="img/Image1460.gif" WIDTH=20 HEIGHT=20> &#8594; <IMG SRC="img/Image1461.gif" WIDTH=17 HEIGHT=19>-
 стираются точки пересечения</P>
<P>2 – or<IMG SRC="img/Image1459.gif" WIDTH=20 HEIGHT=20>
 + <IMG SRC="img/Image1460.gif" WIDTH=20 HEIGHT=20> &#8594; <IMG SRC="img/Image1462.gif" WIDTH=20 HEIGHT=20>-
 оба изображения</P>
<P>3 – and<IMG SRC="img/Image1459.gif" WIDTH=20 HEIGHT=20>
 + <IMG SRC="img/Image1460.gif" WIDTH=20 HEIGHT=20> &#8594; <IMG SRC="img/Image1463.gif" WIDTH=20 HEIGHT=20>-
 остаются точки пересечения</P>
<P>&nbsp;</P>
<P></P>
<P><U>Пример1:</u> Программа перемещения по экрану графического
 объекта</P>
<P class=code>usescrt, graph;</P>
<P class=code>vargd, gm, x, y: integer;</P>
<P class=code>&nbsp;&nbsp;&nbsp;m: array [1..1500]
 of byte;</P>
<P class=code>begin</P>
<P class=code>&nbsp;gd:=detect;</P>
<P class=code>&nbsp;initgraph (gd, gm, ‘c:\tp6\bgi’);</P>
<P class=code>&nbsp;if graphresult &lt;&gt; 0 then</P>
<P class=code>&nbsp;begin</P>
<P class=code>&nbsp;&nbsp;&nbsp;write (‘ошибка
 графики:’, grapherrormsg (graphresult));</P>
<P class=code>&nbsp;&nbsp;&nbsp;halt;</P>
<P class=code>&nbsp;end;</P>
<P class=code>&nbsp;circle(20,20,20);</P>
<P class=code>&nbsp;getimage(0,0,40,40,m);</P>
<P class=code>&nbsp;x:=0; y:=0;</P>
<P class=code>&nbsp;readln;</P>
<P class=code>&nbsp;while x&lt;600 do</P>
<P class=code>&nbsp;begin</P>
<P class=code>&nbsp;&nbsp;&nbsp;putimage(x,y,m,1);</P>
<P class=code>&nbsp;&nbsp;&nbsp;x:=x+2; y:=y+1;</P>
<P class=code>&nbsp;&nbsp;&nbsp;putimage(x,y,m,1);</P>
<P class=code>&nbsp;&nbsp;&nbsp;delay(100);</P>
<P class=code>&nbsp;end;</P>
<P class=code>&nbsp;closegraph;</P>
<P class=code>end.</P>
<P>&nbsp;</P><P></P><P></P>
<P>&nbsp;</P>
</td>
</TR>
</table>
<hr>
<div align=center><font size=2 face=Arial color="#0000FF"><a href="lec6.htm">назад</a>
 | <a href="index_lec.htm">оглавление</a> | <a href="lec8.htm"> вперёд</a></font></div>
</BODY>
</HTML>
