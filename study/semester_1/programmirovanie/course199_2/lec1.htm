<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<TITLE></TITLE>
<style type="text/css">
p {
margin:0cm;
margin-bottom:.0001pt;
text-align:justify;
text-indent:35.45pt;
mso-pagination:widow-orphan;
font-size:12.0pt;
font-family:"arial";
mso-fareast-font-family:"arial";
}
.code{font-family:"Courier New";font-size:10pt}
</style>
</HEAD>
<BODY>
<basefont face=arial size=3>
<B></B>
<table border="0" cellpadding="0" cellspacing="0" width="100%"
 height="31">
<TR>
 <TD width="100%" bgcolor="#000000"><div align=right><font color="#FFFFFF" size=3 face=Arial><b>Программирование
 на языках высокого уровня. Язык программирования Паскаль&nbsp;</b></font></div></td>
</TR>
</table>
<table border="0" cellpadding="2" cellspacing="0" width="100%" height="35">
<TR>
 <TD width="486" bgcolor=gray height="26">
 <p align=right>&nbsp;</p>
 </td>
 <TD width="230" bgcolor="#EEE0BF" height="26">
 <p align=center><font size=2 face=Arial color="#0000FF"><a href="P6.htm">
</a><a href="index_lec.htm">оглавление</a> | <a href="lec2.htm">
вперёд</a></font></p>
 </td>
 <TD width="43" height="26">&nbsp;</td>
</TR>
</table><br>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<TR>
 <TD><div align=center></div>
 <P><b>1. Введение</b></P>
<P>&nbsp;</P>
<P></P>
<P>Язык программирования Паскаль был разработан в начале
 70-х годов швейцарским ученым Никлаусом Виртом. Язык Паскаль эффективен
 в самых разных приложениях и широко используется как для решения небольших
 задач, так и для разработки сложных программных систем-компиляторов, баз
 данных, операционных систем и т.п.</P>
<P>&nbsp;</P>
<P></P>
<P><B><U><a name="1_1"></a>1.1 Основные особенности языка
 Паскаль</u>,</b> обусловившие его выдающийся успех, заключаются в следующем:</P>
<OL>
 <P>
 <LI>Это традиционный язык программирования, продолжающий линию algol-60;</LI>
 <P></P>
 <P>
 <LI>Содержит удобные средства для представления данных и развитую систему
 типов. Типы переменных фиксируются при описании, что позволяет осуществлять
 строгий контроль доступа к данным;</LI>
 <P></P>
 <P>
 <LI>Набор операторов языка отражает принципы структурного программирования
 и позволяет писать компактные и понятные программы;</LI>
 <P></P>
 <P>
 <LI>Синтаксис языка не сложен, программы записываются в свободном формате,
 что делает их наглядными и удобными для отладки.</LI>
 <P></P>
 </OL>
<P></P>
<P>Мы будем изучать <U>широко известную реализацию</U> языка
 Паскаль <U>фирмы Borland</U> для IBM-совместимых компьютеров – систему
 Турбо-Паскаль (версии 6.0, 7.0).</P>
<P>Система Турбо-Паскаль имеет интегрированную среду программирования,
 т.е. совокупность программ, объединенных в общую систему, которая позволяет
 писать и редактировать программы, компилировать их, компоновать, отлаживать
 и запускать на выполнение, не выходя из среды. Включает в себя:</P>
<OL>
 <P>
 <LI>универсальный текстовый многооконный редактор для создания и корректировки
 текстов;</LI>
 <P></P>
 <P>
 <LI>компилятор – программу, переводящую текст программы в машинные коды;</LI>
 <P></P>
 <P>
 <LI>компоновщик, позволяющий компоновать программу из отдельных частей;</LI>
 <P></P>
 <P>
 <LI>отладчик, служащий для выполнения программы по шагам и устранения
 ошибок;</LI>
 <P></P>
 <P>
 <LI>систему контекстной информационной помощи.</LI>
 <P></P>
 </OL>
<P></P>
<P><U><B><a name="1_2"></a>1.2 Алфавит языка</b></u> – совокупность
 допустимых в языке символов. Состоит из следующих символов:</P>
<OL>
 <P>
 <LI>заглавные и строчные латинские буквы и знак “подчерк”: A…Z, a…z, _</LI>
 <P></P>
 <P>
 <LI>цифры 0…9</LI>
 <P></P>
 <P>
 <LI>22 специальных символа: +, -, *, /, &gt;, &lt;, (, ), [, ], @, #,
 $, ….</LI>
 <P></P>
 </OL>
<P></P>
<P><U><B><a name="1_3"></a>1.3 Лексическая структура языка</b></u>
 включает следующие элементы:</P>
<OL>
 <P>
 <LI><I>служебные</i> (зарезервированные, ключевые) <I>слова</I> (52 слова):
 begin, end, if,while,for… . Это группа слов, смысл которых фиксирован
 в языке, их нельзя использовать в качестве имен, вводимых программистом,</LI>
 <P></P>
 <P>
 <LI><I>идентификаторы</i> (имена) - для обозначения переменных, констант,
 типов… Образуются из букв и цифр, начинаются всегда обязательно с буквы,
 длина произвольная, но компилятор воспринимает первые 63 символа. Не
 существует различия между прописными и строчными буквами: Например,
 index, INDEX, Index – одна переменная.</LI>
 <P></P>
 </OL>
 <DIR>
<P><U>Пример</u>:</P>
<P>Верная запись: lab1, name_a, g255</P>
<P>Неверная запись:1lab, name a, g*255</P>
 </DIR>
 <OL START=3>
 <P>
 <LI>в тексте программы допускаются фрагменты пояснительного текста – <I>комментарии</I>,
 которые располагаются между фигурными скобками или знаками (* *) и компилятором
 игнорируются.</LI>
 <P></P>
 </OL>
 <DIR>
<P><u>Пример:</u></P>
<P>{комментарий}</P>
<P>{ тоже комментарий, но</P>
<P> на двух строках }</P>
<P></P>
 </DIR>
<P><b><u><a name="1_4"></a>1.4 Общая структура программы</u></b></P>
<P>Программа на Паскале представляет собой формальную запись
 алгоритма, приводящую к решению некоторых задач. Программа состоит из
 заголовка и двух разделов: Раздел описания данных и Раздел описания действий.
 Действия представляются операторами языка, данные вводятся посредством
 описаний и определений. Описание данных предшествует описанию действий
 и должно содержать все объекты, используемые в действиях.</P>
<P>Итак, рассмотрим структуру программы подробнее.</P>
<P></P>
 <DIR>
<P><B>Заголовок</b> программыProgram Pr1;</P>
 </DIR>
<P>В Турбо-Паскале <I>заголовок</I> программы необязателен
 и компилятором (см. п.1.1.) игнорируется; Кроме того, в Турбо-Паскале
 существует еще один раздел – раздел <I>объявления используемых модулей</I>:
 </P>
<P><i>Uses Crt, Graph;</i></P>
<P>который описывается в самом начале текста программы,
 после заголовка, если таковой имеется.</P>
<P></P>
<P><B>Раздел описания данных </b>может включать пять подразделов:</P>
<OL>
 <P>
 <LI>описание метокLabel M1, Met; </LI>
 <P></P>
 <P>- используются для передачи управления внутри программы,</P>
 <P>
 <LI>описание константConst a=2; c=3.5;</LI>
 <P></P>
 <P><I>константы</i> – элементы программы, значения которых
 <I>не меняются</I> в процессе ее выполнения.</P>
 <P>В результате приведенного примера описания констант,
 система отведет две ячейки памяти с именами a и c и занесет в них значения
 2 и 3,5 соответственно. При попытке записать в эти ячейки памяти какие-либо
 значения во время работы программы – система выдаст сообщение об ошибке.</P>
 <P>Константы могут быть целыми, вещественными, символьными
 и строковыми.</p>
<P>&nbsp;</P>
 <P><u>Пример:</u></P>
 <P>Consta=5;- целая десятичная.</P>
 <P>b=$F;- целая шестнадцатеричная
 (~15)</P>
 <P>c=-0.5; d=7.5E-5;- вещественные (Е или
 е – показатель степени; 7.5Е–5 = 7.5&#215; 10<SUP>-5</SUP> ).</P>
 <P>Обратите внимание: целая часть отделяется от дробной
 – точкой (а не запятой).</P>
 <P>e=’*’;- символьная.</P>
 <P>f=’Турбо’;- строковая.</P>
 <P>Бывают<I> Типизированные константы</I> – переменные,
 которым при описании присваивается начальное значение. Могут использоваться
 как обычные переменные (о типах и переменных см. далее)</p>
<P>&nbsp;</P>
 <P><u>Пример:</u></P>
 <P>Constmax: integer = 92;</P>
 <P>R: real = 2.7;</P>
 <P>В результате данного примера описания констант, система
 отведет две ячейки памяти с именами max и R и занесет в них значения
 92 и 2.7 соответственно. Во время работы программы разрешается заносить
 в такие ячейки новые значения соответствующего типа. В приведенном примере:
 в ячейку max – целые числа; в ячейку R – вещественные числа.</p>
<P>&nbsp;</p>
 <P></P>
 <P>
 <LI>описание типовType Mas = array [1..10] of integer;</LI>
 <P></P>
 <P> tp = 1..6;</P>
 <P> int = integer;</P>
 <P>Под <I>типом</I> данных понимается множество допустимых
 значений этих данных и совокупность операций над ними. В языке определены
 несколько стандартных типов данных: integer, real, char, Boolean,… (о
 стандартных типах Паскаля см. далее в разделе 2). Кроме того, можно
 описывать и собственные типы в разделе Type (см. также п.2.7).</P>
 <P>
 <LI>описание переменных Var x: real; y,z: integer;</LI>
 <P></P>
 <P> p:Boolean;</P>
 <P><I>Переменные</i> – элементы программы, значения которых
 могут изменяться в процессе ее выполнения. С каждой переменной при ее
 описании связывается ее тип.</P>
 <P>В результате данного примера описания переменных, система
 отведет четыре пустых ячейки памяти. Во время работы программы:</P>
 <P>- в ячейку x можно записывать только вещественные
 числа из диапазона значений, соответствующего типу Real; {о типах и
 соответствующих диапазонах см. в разделе 2}</P>
 <P>- в ячейки y,z можно записывать только целые числа
 из диапазона от -32768 до +32767.</P>
 <P>При попытке записать в эти переменные значение, например,
 32768, система выдаст сообщение об ошибке: выход за границы диапазона
 типа.</P>
 <P>- в ячейку p можно записывать только значения True
 (истина) или False (ложь).</P>
 <P></P>
 <P>
 <LI>описание подпрограмм: функцийFunction F(x: real): real;<br>
 и (или) процедур Procedure Alfa;</LI>
 </OL>
<P><I>Процедуры и функции</i> – самостоятельные части программы,
 имеющие свое имя и выполняющие определенные действия (см. раздел 5).</P>
<P></P>
<P>В программе могут использоваться не все подразделы, а
 только необходимые для конкретной задачи. Порядок размещения разделов
 произвольный, можно создавать несколько одинаковых разделов. В любом месте
 программы можно использовать элементы, описанные <U>ранее по тексту.</U>
 </P>
<P>Раздел описания данных может вообще отсутствовать.</P>
<P>&nbsp;</P>
<P></P>
<P><B>Раздел описания действий </b>(еще его называют<B>
 </B>выполняемая часть программы илитело программы)</P>
<P>начинается со слова <U>begin</U> и заканчивается словом
 <U>end</U> с точкой. Между этими словами записывается последовательность
 операторов, реализующая алгоритм решения задачи. Операторами называют
 команды, действия. Выполняемые операторы в языке Паскаль отделяются друг
 от друга точкой с запятой. Порядок выполнения операторов программы: слева
 направо сверху вниз.</P>
<P>&nbsp;</P>
<P></P>
<P><u>Пример:</u></P>
<P class=code>Begin</P>
<P class=code><span class=code>&nbsp;Write(‘*****’);</span></P>
<P class=code>End.</P>
<P>&nbsp;</P>
<P>Данная программа содержит только одну команду – оператор
 вывода на экран. В результате ее работы на экране мы увидим строку из
 5-ти звездочек: ***** . Раздел описания данных для этой задачи не требуется.</P>
<P>&nbsp;</P>
<P></P>
<P><U>Пример: </u>Программа вычисляет сумму двух заданных
 чисел и выводит результат на экран.</P>
<P>Несколько забегая вперед скажу, что знак := (присвоить)
 - это обозначение оператора присваивания, который заносит значение, полученное
 справа от знака, в ячейку памяти с именем, указанным слева от знака (см.
 п. 3.1.)</P>
<P><I>1 вариант:</i><span class=code>const a=3.5;
 b=2;</span></P>
<P class=code>var sum: real;</P>
<P class=code> Begin</P>
<P class=code> &nbsp;sum:=a+b; {складывается содержимое
 ячеек a и b, результат записывается в ячейку sum }</P>
<P class=code>&nbsp;write(a,’ + ’,b,’ = ’,sum);
 {на экран выводится: 3.5 + 2 = 5.5}</P>
<P class=code> End.</P>
<P>&nbsp;</P>
<P><I>2 вариант:</i><span class=code>var a,b,sum:
 real;</span></P>
<P class=code> Begin</P>
<P class=code> &nbsp;a:=3.5; b:=2; {в ячейку a заносится
 число 3.5, в b – число2}</P>
<P class=code> &nbsp;sum:=a+b; {складывается содержимое
 ячеек a и b, результат записывается в ячейку sum }</P>
<P class=code>&nbsp;write(a,’ + ’,b,’ = ’,sum);
 {на экран выводится: 3.5 + 2 = 5.5}</P>
<P class=code> End.</P>
<P>&nbsp;</P>
<P><I>3 вариант:</i><span class=code>var a,b: real;</span></P>
<P class=code> Begin</P>
<P class=code> &nbsp;a:=3.5; b:=2; {в ячейку a заносится
 число 3.5, в b – число2}</P>
<P class=code> &nbsp;a:=a+b; {складывается содержимое
 ячеек a и b, результат записывается в ячейку sum }</P>
<P class=code>&nbsp;write(’ сумма = ’,a); {на
 экран выводится: сумма = 5.5}</P>
<P class=code> End.</P>
<P>&nbsp;</P>
<P>В 3-м варианте к моменту выполнения команды write в ячейке
 a содержится уже не слагаемое (3.5), а результат (5.5), поэтому вывод
 слагаемых как в первых двух вариантах невозможен. Таким образом, если
 слагаемые еще необходимо далее использовать в программе, то для хранения
 результата надо выделять отдельную ячейку памяти, как в вариантах1 и 2.
 </P>
<P>Надо понимать, что в каждый момент времени в одной ячейке
 памяти хранится одно число. Если записать в нее другое число, то предыдущее
 удаляется.</P>
<P>&nbsp;</P>
<P><a name="1_5"></a><b><u>1.5 Стандартные процедуры и функции</u></b></P>
<P>В Паскале существует ряд заранее разработанных подпрограмм,
 которые можно использовать в своих программах.</P>
<OL>
 <P>
 <LI><u>Арифметические функции</u></LI>
 <P></P>
 <P>y := abs(x);y = |x|</P>
 <P>y := sin(x);y = sin x</P>
 <P>y := cos(x);y = cos x</P>
 <P>y := arctan(x);y = arctg x</P>
 <P>y := exp(x);y = e<SUP>x</sup></P>
 <P>y := ln(x);y = ln x</P>
 <P>y := sqr(x);y = x<SUP>2</sup></P>
 <P>y := sqrt(x);y = &#8730;x</P>
 <P>y := pi;y = &#960;</P>
 <P>y := frac(x);дробная часть числа frac(3.9)=0.9</P>
 <P>y := int(x);целая часть числа int(3.9)=3.0</p>
<P>&nbsp;</P>
 <P>Арифметические функции можно использовать только с
 величинами целого или вещественного типа. Результат арифметических функций
 (кроме sqr и abs) – вещественный. У sqr и abs тип результата совпадает
 с типом аргумента.</P>
 <P>В Паскале нет функции возведения в степень, эта функция
 вычисляется с использованием функций exp и ln следующим образом:</P>
 <P>y<SUP>x</SUP> = exp(x*ln(y));</P>
 <P></P>
 <P>
 <LI><u>Некоторые другие функции и процедуры</u></LI>
 </OL>
 <dir>
 <table width="550" border="0" cellpadding="1">
 <tr valign=top>
 <TD width="111">y := round(x);</td>
 <TD width="429">округление вещественного числа до ближайшего целого:<br>
 round(4.7)=5; round(3.2)=3; round(2.5)=2</td>
</TR>
 <tr valign=top>
 <TD>y := trunc(x);</td>
 <TD>целая часть вещественного числа: trunc(4.7)=4</td>
</TR>
 <tr valign=top>
 <TD height="58">y := odd(x);</td>
 <TD>проверка величины х на нечетность: true, если х нечетный, иначе
 false Например, odd(3) = True; odd(2) = False;</td>
</TR>
 <tr valign=top>
 <TD>write(x);</td>
 <TD>вывод значения х на экран</td>
</TR>
 <tr valign=top>
 <TD>writeln(x);</td>
 <TD>вывод значения х на экран с последующим переводом курсора на новую
 строку</td>
</TR>
 <tr valign=top>
 <TD> read(x);</td>
 <TD>ввод значения х с клавиатуры</td>
</TR>
 <tr valign=top>
 <TD>readln(x);</td>
 <TD>ввод значения х с клавиатуры с последующим переводом строки</td>
</TR>
 <tr valign=top>
 <TD>clrscr;</td>
 <TD> очистка экрана, перевод курсора в его левый верхний угол
 Чтобы использовать эту процедуру, надо подключить к программе модуль
 CRT: uses crt;</td>
</TR>
 <tr valign=top>
 <TD>delay(msec);</td>
 <TD>задержка экрана, msec – число в микросекундах</td>
</TR>
 <tr valign=top>
 <TD>Random(n);</td>
 <TD>генератор случайных целых чисел - в каждый момент времени выдает
 одно случайное целое число из диапазона от 0 до n-1 включительно.
 </td>
</TR>
 <tr valign=top>
 <TD>Random;<i></i></td>
 <TD>генератор случайных чисел без параметра - генерирует вещественное
 число из диапазона от 0 до 1.</td>
</TR>
 <tr valign=top>
 <TD><i>Randomize;</i></td>
 <TD>процедура инициализации (первоначальная настройка) генератора случайных
 чисел. Всегда вызывается до использования random. Если не использовать
 <i>Randomize, </i>то при каждом новом запуске программы на выполнение,
 генератор случайных чисел будет выдавать одну и ту же первоначально
 выданную последовательность случайных чисел. </td>
</TR>
 </table>
 </dir>
<P>&nbsp;</p><P><u>Пример:</u></P>
<P>x:=random(10);{случайное целое число из диапазона от 0 до
 9}</P>
<P> x:=random(100)-50;{ random(100) - случайное целое число из диапазона
 от 0 до 99,</P>
<P> минимально возможное значение x = 0 – 50 = -50;</P>
<P> максимально возможное значение x = 99 – 50 = 49; }</P>
<P>y:=random*10;{ случайное вещественное число из диапазона
 от 0 до 9}</P>
<P>z:=random*10-10;{ случайное вещественное отрицательное число
 из диапазона от 0 до 9}</P>
<P>&nbsp;</P>
<P></P>
<P><U>Пример:</u> программа вычисления площади круга S=
 &#960;r<SUP>2</SUP>.</P>
 <DIR>
<P><span class=code>Uses Crt; {<I>подключение модуля
 Crt - в нем описана процедура Clrscr – очистка экрана</I>}</span></P>
<P class=code> Var s,r: real; {<I>раздел описания переменных–описаны
 2 переменные вещественного типа</I>}</P>
<P class=code>Begin</P>
<P class=code> Clrscr; { <I>очистка экрана</I> }</P>
<P class=code> Write(‘Введите радиус r = ’); {<I>выведет
 на экран текст: Введите радиус r =</I> }</P>
<P class=code> Readln(r); {<I>приостановит работу программы
 до ввода какого-либо (одного) числа: надо</i></P>
<P class=code><i> набрать на клавиатуре число и нажать
 клавишу Enter. После этого введенное число</i></P>
<P class=code><I> автоматически запишется в переменную,
 указанную в скобках</i> }</P>
<P class=code> s:=pi*r*r; {<I>вычислит значения выражения
 и запишет результат в s; pi &#8776; 3,14…}</i></P>
<P class=code> writeln(‘Площадь круга S =’, s:10:5); {<I>выведет
 на экран текст из апострофов и значение s</I>}</P>
<P class=code> delay(10000); {<I>задержит результат на
 экране в течении 10 секунд, затем вернется к</i></P>
<P><span class=code><I> исходному тексту программы</i>}</span></P>
<P class=code>End.</P>
<P></P>
 </DIR>
<P>При работе с целыми числами могут оказаться полезными
 две процедуры (в квадратных скобках указываются необязательные параметры):
 </P>
<P></P>
<P>dec (x [, N]) - уменьшает содержимое переменной x
 на значение выражения N (если N не задано, то на 1); тип переменной x
 и выражения N - INTEGER (точнее, любой целый тип: см.п.2.1);</P>
<P></P>
<P>inc (x [, N]) - увеличивает значение x на N (если
 N не задано, то на 1).</P>
<P></P>
<P><U>Например</u>, a:=6; b:=4; x:=7; y:=0;</P>
<P> dec(a,3); inc(b,3); dec(x); inc(y);</P>
<P> write(‘a=’,a,’ b=’,b,’ x=’,x,’ y=’,y);</P>
<P></P>
<P>В результате выполнения данного фрагмента программы,
 на экране увидим следующее:</P>
<P>a=3 b=7 x=6 y=1</P>
<P>&nbsp;</P>
<P></P>
<P><b><u><a name="1_6"></a>1.6 Процедуры ввода/вывода</u></b></P>
<P></P>
<OL>
 <P>
 <LI><I><U>Для вывода</u></i> используются процедуры write и writeln
 (окончание ln означает перевод курсора на следующую строка после
 вывода).</LI>
 </OL>
<P>Форма записи:write (&lt;список параметров&gt;); -
 выводит параметры на экран; курсор вывода</P>
<P> остается на этой же строке.</P>
<P>writeln (&lt;список параметров&gt;); - выводит
 параметры на экран; переводит курсор</P>
<P> вывода на следующую строка после вывода.</P>
<P></P>
<P>В <I>список параметров</I> могут входить <I>переменные</I>
 и <I>строки</I>, возможно с указанием <I>формата:</i></P>
<P>Переменные: а, в, х1… - выводятся значения переменных;</P>
 </DIR></DIR>
<P> Строки: ‘a = ’, ‘сумма = ’ - заключаются в апострофы,
 выводится то, что в апострофах.</P>
<P>Форматы вывода:</P>
<OL>
 <OL>
 <P>
 <LI><I>для целых чисел и строк</i>: х:М, где М – ширина поля вывода
 (количество позиций, выделяемых под запись числа х)</LI>
 <P></P>
 <P>
 <LI><I>для вещественных чисел</i>: у:M:N, где N – количество цифр после
 десятичной точки.</LI>
 <P></P>
 </OL>
 </OL>
<P><u>Пример 1:</u></P>
<P></P>
<P>S:=2.71828;</P>
<P>Writeln(‘_sum=’, S:7:3, ‘ ’:3, ‘p=’, 2+4);<br>
 </P>
<P></P>
<P>№ позиции экрана:1 2 3 4 5 6 7 8 9 10 11 12 13 14
 15 16 17 18 </P>
<P>На экране: _ s u m = 2 . 7 1 8 p = 6</P>
<P></P>
 </DIR></DIR></DIR></DIR>
<P><u>Пример 2:</u></P>
<P></P>
<P>I:=’+’;№ позиции: 1 2</P>
<P>Writeln(i);На экране увидим: +</P>
<P>Writeln(i); +</P>
<P>Write(i); + +</P>
<P>Writeln(i); +</P>
<P>Write(i);</P>
<P>&nbsp;</P>
<P></P>
<P><U><I>Замечание:</i></u> оператор <I>writeln;</I> без
 параметров переводит курсор на следующую строку.</P>
<P></P>
 <OL START=2>
 <P>
 <LI><I><U>Для ввода</u></i>данных используются процедуры read и readln.</LI>
 </OL>
<P>Форма записи:read(&lt;список параметров&gt;);</P>
<P>readln(&lt;список параметров&gt;);</P>
<P><i>приостановит работу программы до ввода какого-либо
 (одного) числа: надо</i></P>
<P><i> набрать на клавиатуре число и нажать клавишу Enter.
 После этого введенное число</i></P>
<P><i> автоматически запишется в переменную, указанную в
 скобках</i></P>
<P>В качестве <I>параметров </I>указываются имена переменных,
 значения которых будут вводиться с клавиатуры.</P>
<P><U>Выполняется процедура ввода следующим образом</u>:
 приостанавливается работа программы и ожидается ввод с клавиатуры стольких
 значений, сколько переменных указано в скобках.</P>
<P>&nbsp;</P>
<P>Значения вводятся так: </P>
<P><I>1 способ</i>: после каждого введенного значения нажимать
 клавишу Enter.</P>
<P><I>2 способ</i>: после каждого введенного значения нажимать
 клавишу Пробел, а после последнего введенного значения - клавишу Enter.</P>
<P>После окончания ввода одним из указанных способов, значения
 присваиваются переменным, указанным в скобках, в соответствующем порядке.</P>
<P>&nbsp;</P>
<P></P>
<P><U>Пример:</u> на экране:</P>
<P></P>
<P>Readln(a,b,c);1 5 7.5 </P>
<P>Read(x);3.28</P>
<P></P>
 </DIR></DIR>
<P><i><u>Замечания:</u></i></P>
<P>1. Отличие операторов read(&lt;список параметров&gt;);
 и readln(&lt;список параметров&gt;); заключается в следующем: после
 read экранный курсор вывода остается на прежней строке, а после readln
 – перемещается на следующую строку.</P>
<P>2. Оператор <I>readln;</I> без параметров осуществляет
 задержку выполнения программы до тех пор, пока не будет нажата какая-либо
 клавиша. Например, в примере вычисления площади круга (см. п.1.4) можно
 вместо команды delay(10000); применить readln. Отличие будет в том, что
 delay(10000); задержит результат на экране в течении 10 секунд, затем
 вернется к исходному тексту программы, а readln - задержит результат на
 экране до нажатия пользователем какой-либо клавиши, затем так же вернется
 к исходному тексту программы.</P>
<P>&nbsp;</P>
<P></P>
<P><b><u><a name="z"></a>Задачи для самоконтроля</u></b></P>
<P></P>
<P><B>1.1</b> Какой оператор является ошибочным?</P>
<P>const a =7.5;</P>
<P> b:rea =4.6;</P>
<P> var c:real;</P>
<P>Begin</P>
<P>a:=3.4;</P>
<P>b:=5.2;</P>
<P>c:=8.5;</P>
<P>&nbsp;</P>
<P></P>
<P><B>1.2</b> Вычислить значения выражений</P>
<P>а) trunc(6.9); б) round(6.9);</P>
<P>в) trunc(-1.8); г) round(-1.8).</P>
<P>&nbsp;</P>
<P></P>
<P><B>1.3</b> Что увидим на экране после выполнения данного
 фрагмента программы:</P>
<P>a:=4;</P>
<P>write(a);</P>
<P>writeln; writeln(a);</P>
<P> write(a);</P>
<P>writeln(a);</P>
<P>writeln;</P>
<P>write(a);</P>
<P>&nbsp;</P>
<P></P>
<P><B>1.4</b> Определите диапазон возможных значений числа
 X:</P>
<P>а) X:=random(56);</P>
<P>б) X:=random(25) – 32;</P>
<P>в) X:= 67 - random(43);</P>
<P>г) X:=random(98) – 32;</P>
<P></P>
<P>&nbsp;</P><P>&nbsp;</P></td>
</TR>
</table>
<hr>
<div align=center><font size=2 face=Arial color="#0000FF"><a href="index_lec.htm">оглавление</a> | <a href="lec2.htm"> вперёд</a></font>
</div>
</BODY>
</HTML>
