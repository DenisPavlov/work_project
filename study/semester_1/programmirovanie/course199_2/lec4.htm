<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<TITLE></TITLE>
<style type="text/css">
p {
margin:0cm;
margin-bottom:.0001pt;
text-align:justify;
text-indent:35.45pt;
mso-pagination:widow-orphan;
font-size:12.0pt;
font-family:"arial";
mso-fareast-font-family:"arial";
}
.code{font-family:"Courier New";font-size:10pt}
</style>
</HEAD>
<BODY>
<basefont face=arial size=3>
<B></B>
<table border="0" cellpadding="0" cellspacing="0" width="100%"
 height="31">
<TR>
 <TD width="100%" bgcolor="#000000"><div align=right><font color="#FFFFFF" size=3 face=Arial><b>Программирование
 на языках высокого уровня. Язык программирования Паскаль&nbsp;</b></font></div></td>
</TR>
</table>
<table border="0" cellpadding="2" cellspacing="0" width="100%" height="35">
<TR>
 <TD width="486" bgcolor=gray height="26">
<P align=right>&nbsp;</p>
 </td>
 <TD width="230" bgcolor="#EEE0BF" height="26"><p align=center><font size=2 face=Arial color="#0000FF"><a href="P6.htm">
</a><a href="lec3.htm">назад</a> | <a href="index_lec.htm">оглавление</a>
| <a href="lec5.htm"> вперёд</a></font></p>
 </td>
 <TD width="43" height="26">&nbsp;</td>
</TR>
</table><br>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<TR>
 <TD><div align=center></div><P><b>4. Массивы</b></P>
 <P>&nbsp;</P>
<P>Массивы относятся к <I>структурированным типам данных</I>.
 В отличие от простых, структурированные типы определяют наборы однотипных
 или разнотипных компонент.</P>
<P>В Паскале существуют <I>следующие структурированные типы</I>:</P>
 <OL>
 <P>
 <LI>Массивы</LI>
 <p></P>
 <P>
 <LI>Записи</LI>
 <p></P>
 <P>
 <LI>Множества</LI>
 <p></P>
 <P>
 <LI>файлы</LI>
 </OL>
 <OL>
 <p></P>
 </OL>
<P></P>

 <p><b><a name="4_1"></a>4.1 Одномерные массивы</b></p>
 <P>&nbsp;</P>
<P><I>Массив </i>представляет собой фиксированное количество
 элементов <I>одного и того же типа</I>. Такой способ организации позволяет
 обозначать все значения этого типа <I>одним именем</I>, а для доступа
 к отдельным элементам массива использовать это <I>имя и индекс</I> (порядковый
 номер) необходимого элемента.</P>
<P>Например, пусть для решения какой-либо задачи требуется
 в программе выделить 7 ячеек памяти и занести в них начальные значения,
 равные нулю.</P>
<P>Как бы вы это сделали, </P>
<P></P>
 <TABLE BORDER CELLSPACING=1 CELLPADDING=1 WIDTH=550>
<TR>
 <TD WIDTH="50%" VALIGN=TOP HEIGHT=13><div align=center>используя
 простые переменные:</div></TD>
 <TD WIDTH="50%" VALIGN=TOP HEIGHT=13><div align=center>используя
 массив:</div></TD>
</TR>
<TR>
 <TD WIDTH="50%" VALIGN=TOP HEIGHT=204> Var a, b, c, d, e, g, h: integer;
 <br>
 Begin<br>
 &nbsp;a:=0;<br>
 &nbsp;b:=0;<br>
 &nbsp;c:=0<br>
 &nbsp;d:=0;<br>
 &nbsp;e:=0;<br>
 &nbsp;g:=0;<br>
 &nbsp;h:=0;<br>
 &nbsp;…
 <P></TD>
 <TD WIDTH="50%" VALIGN=TOP HEIGHT=204>
 Var a: array [1..7] of integer;<br>
 &nbsp;&nbsp;p:integer;<br>
 Begin<br>
 &nbsp;for p:=1 to 7 do <br>
 &nbsp;a[p]:=0;<br>
 … </TD>
</TR>
 </TABLE>
<P><br>
</P>
 В памяти наш массив можно представить следующим образом:
<TABLE BORDER CELLSPACING=1 CELLPADDING=1 WIDTH=163 HSPACE=12>
<TR>
 <TD WIDTH="15%" VALIGN=TOP>&nbsp;</TD>
 <TD WIDTH="15%" VALIGN=TOP>&nbsp;</TD>
 <TD WIDTH="15%" VALIGN=TOP>&nbsp;</TD>
 <TD WIDTH="15%" VALIGN=TOP>&nbsp;</TD>
 <TD WIDTH="15%" VALIGN=TOP>&nbsp;</TD>
 <TD WIDTH="15%" VALIGN=TOP>&nbsp;</TD>
 <TD WIDTH="12%" VALIGN=TOP>&nbsp;</TD>
</TR>
<TR>
 <TD height="24" colspan="7" VALIGN=TOP> a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>,
 a<sub>4</sub>, a<sub>5</sub>, a<sub>6</sub>, a<sub>7</sub></TD>
</TR>
 </TABLE>
<P></P>
<P>&nbsp;</P>
<P></P>
<P><u>Описание массива</u></P>
<P><b>var &lt;имя&gt;: array [n1..n2] of &lt;тип элементов&gt;;
 </b></P>
<P></P>
<P>- одномерный массив, имеет один размер – количество элементов:</P>
<P>n1 – начальный индекс массива (порядковый номер 1-го
 элемента),</P>
<P>n2 – конечный индекс массива (порядковый номер последнего
 элемента),</P>
<P>&lt;тип&gt; - тип элементов массива.</P>
<P><I>Индексы </i>задаются константами, обычно целого или
 символьного типа. <I>Тип элементов</I> массива может быть любой.</P>
<P>&nbsp;</P>
<P></P>
<P><U>Пример 1</u>:</P>
<P class=code>vara: array [-2..5] of integer; {8 элементов
 целого типа}</P>
<P class=code>varb: array [0..3] of integer; {4 элемента
 целого типа }</P>
<P>&nbsp;</P>
<P></P>
<P>Доступ к элементам массива осуществляется указанием имени
 массива, за которым в квадратных скобках указывается значение индекса
 элемента: <U>имя[индекс]</u></P>
<P>В качестве индекса можно использовать:</P>
 <UL>
 <P>
 <LI>константы: а[5], b[38]</LI>
 <p></P>
 <P>
 <LI>переменные: a[i], b[k]</LI>
 <p></P>
 <P>
 <LI>выражения: a[i+1], b[2*i] </LI>
 <p></P>
 </UL>
<P>Элементы массива можно использовать везде, где допустимо
 использование простых переменных. Обычно при работе с массивами <I>используют
 операторы цикла</I>.</P>
<P>Необходимо следить за тем, чтобы <I>индекс массива не
 выходил за диапазон,</I> указанный при описании (типичная ошибка).</P>
<P>&nbsp;</P>
<P></P>
<P><u>Пример 1.</u></P>
<P><u><img src="img/ex1.gif" width="541" height="155"></u></P>
<P>&nbsp;</P><P>&nbsp;</P>
<P></P>
<P><U>Пример 2. </u>Ввести с клавиатуры массив из 10 элементов
 и вычислить сумму элементов.</P>
<P class=code>vara: array [0..9] of real;</P>
<P class=code>&nbsp;&nbsp;&nbsp;s:real;</P>
<P class=code>&nbsp;&nbsp;&nbsp;i:integer;</P>
<P class=code>begin</P>
<P class=code>&nbsp;&nbsp;writeln (‘Введите 10 элементов
 массива’);</P>
<P class=code>&nbsp;&nbsp;for i:=0 to 9 do readln (a[i]);</P>
<P class=code>&nbsp;&nbsp;s:=0;</P>
<P class=code>&nbsp;&nbsp;for i:=0 to 9 do s:=s+a[i];</P>
<P class=code>&nbsp;&nbsp;writeln (‘сумма=’, s);</P>
<P class=code>end.</P>
<P>&nbsp;</P>
<P><U>Пример 3:</u> Ввести с клавиатуры массив положительных
 чисел (ввод закончить отрицательным числом). Определить максимальный элемент
 массива.</P>
 <P class=code>varm: array [1..1000] of real;</P>
 <P class=code>&nbsp;&nbsp;p, max: real;</P>
 <P class=code>&nbsp;&nbsp;i,n: integer;</P>
 <P class=code>begin</P>
 <P class=code>&nbsp;&nbsp;i:=1;</P>
 <P class=code>&nbsp;&nbsp;repeat</P>
 <P class=code> &nbsp;&nbsp;&nbsp;write(‘Введите ’,i,’ элемент’);</P>
 <P class=code> &nbsp;&nbsp;&nbsp;readln(p);</P>
 <P class=code> &nbsp;&nbsp;&nbsp;if p&gt;0 then m[i]:=p;</P>
 <P class=code> &nbsp;&nbsp;&nbsp;i:=i+1;</P>
 <P class=code>&nbsp;&nbsp;until p&lt;0;</P>
 <P class=code>&nbsp;&nbsp;n:=i-1;</P>
 <P class=code>&nbsp;&nbsp;max:=m[1];</P>
 <P class=code>&nbsp;&nbsp;for i:=1 to n do</P>
 <P class=code> &nbsp;&nbsp;if m[i]&gt;max then max:=m[i];</P>
 <P class=code>&nbsp;&nbsp;writeln(‘max = ’, max);</P>
 <P class=code>end.</P>
 <P>&nbsp;</P>
<P><U>Пример 4:</u> Сформировать массив из 50 случайных
 целых чисел, распечатать его и определить номер элемента, ближайшего к
 среднему арифметическому.</P>
 <P class=code>varb: array [1..50] of integer;</P>
 <P class=code>&nbsp;&nbsp;ras, s: real;</P>
 <P class=code>&nbsp;&nbsp;num, i: integer;</P>
 <P class=code>begin</P>
 <P class=code>&nbsp;&nbsp;randomize;</P>
 <P class=code>&nbsp;&nbsp;for i:= 1 to 50 do b[i]:=random(100);</P>
 <P class=code>&nbsp;&nbsp;for i:= 1 to 50 do write(b[i], ‘ ’);</P>
 <P class=code>&nbsp;&nbsp;s:=0;</P>
 <P class=code>&nbsp;&nbsp;for i:= 1 to 50 do s:=s+b[i];</P>
 <P class=code>&nbsp;&nbsp;s:=s/50;</P>
 <P class=code>&nbsp;&nbsp;num:=1;</P>
 <P class=code>&nbsp;&nbsp;ras:=abs(s-b[1]);</P>
 <P class=code>&nbsp;&nbsp;for i:=2 to 50 do</P>
 <P class=code> &nbsp;&nbsp;if abs(s-b[i])&lt;ras then</P>
 <P class=code> &nbsp;&nbsp;begin</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;ras:=abs(s-b[i]);</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;num:=i;</P>
 <P class=code> &nbsp;&nbsp;end;</P>
 <P class=code>&nbsp;&nbsp;writeln(‘Среднее = ’,s,’ ближайший элемент b[’,num,’]=’,b[num]);</P>
 <P class=code>end.</P>
 <P>&nbsp;</P>
<P><U>Пример 5:</u> Использование стандартных процедур BREAK
 и CONTINUE в операторах циклов. В массиве целых чисел найти первое отрицательное
 число и вывести его на экран.</P>
 <P class=code>constn=10;</P>
 <P class=code>vara: array [1..n] of integer;</P>
 <P class=code>&nbsp;&nbsp;&nbsp;i: integer;</P>
 <P class=code>&nbsp;&nbsp;&nbsp;yes: boolean;</P>
 <P class=code>begin</P>
 <P class=code>&nbsp;&nbsp;writeln(‘Введите элементы массива’);</P>
 <P class=code>&nbsp;&nbsp;for i:=1 to n do</P>
 <P class=code> &nbsp;&nbsp;begin</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;write(‘a[’,i,’]=’);</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;readln(a[i]);</P>
 <P class=code> &nbsp;&nbsp;end;</P>
 <P class=code>&nbsp;&nbsp;yes:=false;</P>
 <P class=code>&nbsp;&nbsp;for i:=1 to n do</P>
 <P class=code> &nbsp;&nbsp;begin</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;if a[i]&gt;=0 then continue;
 { continue – возврат на заголовок цикла}</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;writeln(‘первое отрицательно
 число = ’, a[i]);</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;yes:=true;</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;break; { break – окончание
 выполнения цикла и переход к следующему оператору</P>
 <P class=code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;программы, в
 данном примере – к условному оператору if }</P>
 <P class=code> &nbsp;&nbsp;end;</P>
 <P class=code>&nbsp;&nbsp;if not yes then writeln(‘Отрицательных чисел
 нет’);</P>
 <P class=code>end.</P>
 <P>&nbsp;</P>
 <P>&nbsp;</P>
<P><b><u><a name="4_2"></a>4.2 Сортировка элементов массива</u></b></P>
<P>&nbsp;</P>
<P><I>Сортировкой массива</i> называется расстановка элементов
 массива в возрастающем или убывающем порядке.</P>
<P>Существует множество методов сортировки, рассмотрим два
 наиболее простых и распространенных метода: метод прямого выбора и метод
 “пузырька”.</P>
<P></P>
<P><B>Метод прямого выбора</b> (через поиск максимального
 и минимального элемента).</P>
<P><U>Алгоритм сортировки по возрастанию</u> (через поиск
 минимального элемента):</P>
 <OL>
 <P>
 <LI>Определяется минимальный элемент массива и помещается на 1-е место</LI>
 <p></P>
 <P>
 <LI>Среди оставшихся элементов (начиная со 2-го) определяется минимальный
 элемент и помещается на 2-е место.</LI>
 <p></P>
 <P>
 <LI>Среди оставшихся элементов (начиная со 3-го) определяется минимальный
 элемент и помещается на 3-е место.</LI>
 <p></P>
 <P>
 <LI>И т.д. до конца массива.</LI>
 <p></P>
 </OL>
 <P><u>Пример:</u></P>
 <P><img src="img/ex_sort.gif" width="57" height="107"></P>
 <P>&nbsp;</P>
 <P><u>Программа:</u></P>
 <P class=code>vara: array [1..10] of real;</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;i,j: integer;</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;t: real;</P>
 <P class=code>begin</P>
 <P class=code>&nbsp;&nbsp;randomize;</P>
 <P class=code>&nbsp;&nbsp;for i:= 1 to 10 do</P>
 <P class=code> &nbsp;&nbsp;begin</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;a[i]:=random;</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;write(a[i]:6:3);</P>
 <P class=code> &nbsp;&nbsp;end;</P>
 <P class=code>&nbsp;&nbsp;writeln;</P>
 <P class=code>&nbsp;&nbsp;for i:= 1 to 9 do</P>
 <P class=code> &nbsp;&nbsp;for j:=i+1 to 10 do</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;if a[i]&gt;a[j] then</P>
 <P class=code> begin</P>
 <P class=code>&nbsp;&nbsp;t:=a[i];</P>
 <P class=code>&nbsp;&nbsp;a[i]:=a[j];</P>
 <P class=code>&nbsp;&nbsp;a[j]:=t;</P>
 <P class=code> &nbsp;&nbsp;end;</P>
 <P class=code>&nbsp;&nbsp;for i:= 1 to 10 do write (a[i]:6:3);</P>
 <P class=code>end.</P>
 <P>&nbsp;</P>
 <P>&nbsp;</P>
 <P>Для обмена значениями двух переменных обычно используют дополнительную
 переменную (дополнительную ячейку памяти), в приведенной выше программе
 – это переменная t.</P>
 <P>&nbsp;</P>

<P><B>Метод “пузырька”</b> (перестановок).</P>
<P><u>Алгоритм сортировки по возрастани</u></P>
<P>&nbsp;</P>
 <ul>
 <LI>Сравниваются попарно соседние элементы: 1-й со 2-м, 2-й с 3-м, 3-й
 с 4-м и т.д. до конца массива. Если соседние элементы расположены не
 по возрастанию, то они меняются местами. Таким образом, максимальный
 элемент массива “всплывает” на последнее место.</LI>
 </ul>
 <ul>
 <LI>Снова сравниваются попарно соседние элементы и меняются местами, если
 не по возрастанию. Всплывает элемент, меньший максимального, на предпоследнее
 место.</LI>
 </ul>
 <ul>
 <LI>И т.д. до тех пор, пока будут перестановки.</LI>
 </ul>
 <p></P>
 <P><U>Пример:</U></P>
 <P><u><img src="img/ex_sort2.gif" width="71" height="139"></u></P>
 <P>&nbsp;</P>
 <P><U>Программа:</U></P>
 <P class=code>vara: array [1..10] of real;</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;i: integer;</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;t: real;</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;b: boolean;</P>
 <P class=code>begin</P>
 <P class=code>&nbsp;&nbsp;randomize;</P>
 <P class=code>&nbsp;&nbsp;for i:= 1 to 10 do</P>
 <P class=code> &nbsp;&nbsp;begin</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;a[i]:=random;</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;write(a[i]:6:3);</P>
 <P class=code> &nbsp;&nbsp;end;</P>
 <P class=code>&nbsp;&nbsp;writeln;</P>
 <P class=code>&nbsp;&nbsp;repeat</P>
 <P class=code> &nbsp;&nbsp;&nbsp;&nbsp;b:=false;</P>
 <P class=code> &nbsp;&nbsp;&nbsp;&nbsp;for i:= 1 to 9 do</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;if a[i]&gt;a[i+1] then</P>
 <P class=code> &nbsp;&nbsp;&nbsp;&nbsp;begin</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t:=a[i];</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i]:=a[i+1];</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i+1]:=t;</P>
 <P class=code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b:=true;</P>
 <P class=code> &nbsp;&nbsp;&nbsp;&nbsp;end;</P>
 <P class=code>&nbsp;&nbsp;until b=false; {Если b=false – это значит,
 что не было ни одной перестановки. Следовательно,</P>
 <P class=code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;массив
 отсортирован, переходим к выводу отсортированного массива на экран: }</P>
 <P class=code>&nbsp;&nbsp;for i:= 1 to 10 do write(a[i]:6:3);</P>
 <P class=code>end.</P>
 <P>&nbsp;</P>
 <P>&nbsp;</P>

 <P>&nbsp;</P>
 <P><b><a name="4_3"></a>4.3 Многомерные массивы</b></P>
 <P>&nbsp;</P>
<P>В качестве элементов массива могут быть значения любого
 типа, в том числе и массивы, например:</P>
<P>vara: array [N1..N2] of array [N3..N4] of real;</P>
<P>Обычно используют более короткую форму записи:</P>
<P><B>vara: array [N1..N2, N3..N4] of real;</b>-
 двумерный массив (матрица), имеет два размера:</P>
<P>N1..N2 – диапазон изменения первого индекса (номер строки)</P>
<P>N3..N4 – диапазон изменения второго индекса (номер столбца)</P>
<P>&nbsp;</P>
<P></P>
<P><u>Пример 1:</u></P>
<P>vara: array [1..3, 1..4] of integer;</P>
<P>a<SUB>11</SUB> a<SUB>12</SUB> a<SUB>13</SUB> a<SUB>14</sub></P>
<P>a<SUB>21</SUB> a<SUB>22</SUB> a<SUB>23</SUB> a<SUB>24</sub></P>
<P>a<SUB>31</SUB> a<SUB>32</SUB> a<SUB>33</SUB> a<SUB>34</sub></P>
<P>&nbsp;</P>
<P></P>
<P><u>Пример 2:</u></P>
<P>varb: array [1..5, 1..5, 1..5] of real;-
 трехмерный массив</P>
<P>Мы будем использовать только одномерные и двумерные массивы.</P>
<P></P>
<P>Обращение к элементам:a[1,3]:=0;</P>
<P>a[3,2]:=5;</P>
<P>&nbsp;</P>
<P>В памяти: </P>
<dir>
<TABLE BORDER CELLSPACING=1 CELLPADDING=1 WIDTH=221>
<TR>
 <TD WIDTH="19%" VALIGN=TOP>&nbsp;</TD>
 <TD WIDTH="19%" VALIGN=TOP><P>1</TD>
 <TD WIDTH="19%" VALIGN=TOP><P>2</TD>
 <TD WIDTH="22%" VALIGN=TOP><P>3</TD>
 <TD WIDTH="22%" VALIGN=TOP><P>4</TD>
</TR>
<TR>
 <TD WIDTH="19%" VALIGN=TOP><P>1</TD>
 <TD WIDTH="19%" VALIGN=TOP>&nbsp;</TD>
 <TD WIDTH="19%" VALIGN=TOP>&nbsp;</TD>
 <TD WIDTH="22%" VALIGN=TOP><P ALIGN="RIGHT"><strong>0</strong></TD>
 <TD WIDTH="22%" VALIGN=TOP>&nbsp;</TD>
</TR>
<TR>
 <TD WIDTH="19%" VALIGN=TOP><P>2</TD>
 <TD WIDTH="19%" VALIGN=TOP>&nbsp;</TD>
 <TD WIDTH="19%" VALIGN=TOP>&nbsp;</TD>
 <TD WIDTH="22%" VALIGN=TOP>&nbsp;</TD>
 <TD WIDTH="22%" VALIGN=TOP>&nbsp;</TD>
</TR>
<TR>
 <TD WIDTH="19%" VALIGN=TOP><P>3</TD>
 <TD WIDTH="19%" VALIGN=TOP>&nbsp;</TD>
 <TD WIDTH="19%" VALIGN=TOP><P ALIGN="RIGHT"><strong>5</strong></TD>
 <TD WIDTH="22%" VALIGN=TOP>&nbsp;</TD>
 <TD WIDTH="22%" VALIGN=TOP>&nbsp;</TD>
</TR>
</TABLE>
</dir>
<p></P><P></P><P>&nbsp;</P>
<P><U>Замечание:</u> Размер любого массива не должен превышать
 64 кбайта.</P>
<P>&nbsp;</P>
<P>Как вычислить размер массива рассмотрим на примере 1.
 Массив a имеет размер 3x4, т.е. состоит из 12-ти элементов. Элементы массива
 a целого типа, т.е. каждый элемент занимает 2 байта памяти. Следовательно,
 весь массив занимает 24 байта памяти.</P>
<P></P>
<P>При обработке матрицы внешний цикл может быть по номеру
 строки, а внутренний цикл – по номеру столбца матрицы:</P>
<P></P>
<P class=code>for str:= 1 to 3 do</P>
<P class=code> &nbsp;&nbsp;for stb:= 1 to 4 do</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;write (a[i,j]);</P>
<P>&nbsp;</P>
<P></P>
<P>либо наоборот: внешний цикл - по номеру столбца, а внутренний
 цикл – по номеру строки матрицы:</P>
<P></P>
<P class=code>for stb:= 1 to 4 do</P>
<P class=code> &nbsp;&nbsp;for str:= 1 to 3 do</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;write (a[i,j]);</P>
<P>&nbsp;</P><P>&nbsp;</P>
<P>В результате выполнения 1-го фрагмента программы увидим
 на экране содержимое элементов массива в следующем порядке: a<SUB>11</SUB>
 a<SUB>12</SUB> a<SUB>13</SUB> a<SUB>14 </SUB>a<SUB>21</SUB> a<SUB>22</SUB>
 a<SUB>23</SUB> a<SUB>24</SUB> a<SUB>31</SUB> a<SUB>32</SUB> a<SUB>33</SUB>
 a<SUB>34</sub></P>
<P></P>
<P>В результате выполнения 2-го фрагмента программы - в
 другом порядке: a<SUB>11</SUB> a<SUB>21</SUB> a<SUB>31</SUB> a<SUB>12
 </SUB>a<SUB>22</SUB> a<SUB>32</SUB> a<SUB>13</SUB> a<SUB>23</SUB> a<SUB>33</SUB>
 a<SUB>14</SUB> a<SUB>24 </SUB>a<SUB>34</sub></P>
<P>&nbsp;</P>
<P>Пример 3: Заполнить матрицу размерностью 5х10 целыми
 случайными числами в диапазоне от 0 до 99 и найти минимальный элемент
 матрицы и сумму элементов.</P>
<P class=code>varm: array [1..5,1..10] of integer;</P>
<P class=code>&nbsp;&nbsp;i,j,s, min: integer;</P>
<P class=code>begin</P>
<P class=code>&nbsp;&nbsp;randomize;</P>
<P class=code>&nbsp;&nbsp;for i:=1 to 5 do</P>
<P class=code> &nbsp;&nbsp;begin</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;for j:=1
 to 10 do</P>
<P class=code> &nbsp;&nbsp;&nbsp;&nbsp;begin</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m[i,j]:=random(100);</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(m[i,j]:4);</P>
<P class=code> &nbsp;&nbsp;&nbsp;&nbsp;end;</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;writeln;</P>
<P class=code> &nbsp;&nbsp;end;</P>
<P class=code>&nbsp;&nbsp;s:=0; min:=m[1,1];</P>
<P class=code>&nbsp;&nbsp;for i:=1 to 5 do</P>
<P><span class=code> &nbsp;&nbsp;&nbsp;&nbsp;for
 j:=1 to 10 do</span></P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;begin</P>
<P class=code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s:=s+m[i,j];</P>
<P class=code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
 m[i,j]&lt;min then min:=m[i,j];</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;end;</P>
<P class=code>&nbsp;&nbsp;writeln(‘S = ’,s,’ min =
 ’,min);</P>
<P class=code>end.</P>
<P>&nbsp;</P>
<P>Пример 4: Сформировать матрицу размерностью 5х5, где
 a<SUB>ij</SUB>=i*j , и вывести ее на экран;</P>
<P> определить сумму элементов каждого столбца матрицы и
 вывести полученные значения на экран.</P>
<P class=code>vara: array [1..5,1..3] of integer;</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;sum,i,j:
 integer;</P>
<P class=code>begin</P>
<P class=code>&nbsp;&nbsp;for i:=1 to 5 do</P>
<P class=code> &nbsp;&nbsp;begin</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;for j:=1
 to 3 do</P>
<P class=code> &nbsp;&nbsp;&nbsp;&nbsp;begin</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i,j]:=i*j;</P>
<P class=code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(a[i,j]:4);</P>
<P class=code> &nbsp;&nbsp;&nbsp;&nbsp;end;</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;writeln;</P>
<P class=code> &nbsp;&nbsp;end;</P>
<P class=code>&nbsp;&nbsp;for j:=1 to 3 do</P>
<P class=code> &nbsp;&nbsp;begin</P>
<P class=code> &nbsp;&nbsp;&nbsp;&nbsp;sum:=0;</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for
 i:=1 to 5 do </P>
<P class=code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum:=sum+
 a[i,j];</P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeln(‘сумма
 ’,,j,’-го столбца = ’,sum);</P>
<P class=code> &nbsp;&nbsp;end;</P>
<P class=code>end.</P>
<P>&nbsp;</P><P>&nbsp;</P>
<P><u><strong><a name="z"></a>Задачи для самоконтроля</strong></u></P>
<P>&nbsp;</P>
<P></P>
<P><strong>4.1</strong> Какой оператор является ошибочным?</P>
<P><span class=code>var a: array [0..5] of integer;</span></P>
<P class=code> &nbsp;&nbsp;&nbsp;p: integer;</P>
<P class=code>Begin</P>
<P class=code>&nbsp;&nbsp;a[1]:=8;</P>
<P class=code>&nbsp;&nbsp;p:=5;</P>
<P class=code>&nbsp;&nbsp;a[p+1]:=7;</P>
<P>&nbsp;</P>
<P></P>
<P><B>4.2 </b>Определите значение sum после выполнения программы:</P>
<P><span class=code>var a: array [1..2,1..3] of integer;</span></P>
<P class=code> &nbsp;&nbsp;p, sum: integer;</P>
<P class=code>Begin</P>
<P class=code>&nbsp;&nbsp;a[1,1]:= 8; a[1,2]:=
 - 6; a[1,3]:= 2;</P>
<P class=code>&nbsp;&nbsp;a[2,1]:= 4; a[2,2]:=
 9; a[2,3]:= - 5;</P>
<P class=code>&nbsp;&nbsp;for p:=1 to 2 do </P>
<P class=code>&nbsp;&nbsp;&nbsp;&nbsp;sum:=
 sum + a[p,p];</P>
<P class=code>end.</P>
<P class=code>&nbsp;</P>
<P></P>
</td>
</TR>
</table>
<hr>
<div align=center><font size=2 face=Arial color="#0000FF"><a href="lec3.htm">назад</a>
 | <a href="index_lec.htm">оглавление</a> | <a href="lec5.htm"> вперёд</a></font></div>
</BODY>
</HTML>
